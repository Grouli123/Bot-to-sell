from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import sqlite3

import  get_orders_config.get_orders_API_key as API_key
import  get_orders_config.get_orders_config_message as config_message

import time

botApiKey = API_key.botAPIArz


bot = Bot(botApiKey)
dp = Dispatcher(bot)



maxSymbol = config_message.max_symbol_for_message

phoneButtonText = config_message.phone_button_text
phoneMessageText = config_message.message_to_send_phonenumber
phoneError = config_message.phone_error

geolocationButtonText = config_message.geolocation_button_text
geolocationMessageText = config_message.message_to_send_geolocation
geolocationNameApp = config_message.geolocator_name_app
foundedCity = config_message.founded_city
geolocationError = config_message.geolocation_error

lastnameText = config_message.input_lastname_text
lastnameError = config_message.lastname_error

firstnameText = config_message.input_firstname_text
firstnameError = config_message.firstname_error

middlenameText = config_message.input_middlename_text
middlenameError = config_message.middlename_error

dataOfBirthday = config_message.input_bitrhday_data_text
dateType = config_message.date_type
dateError = config_message.date_error

textOnly = config_message.message_should_be_text_type

citizenRuButtonYesText = config_message.citizen_ru_button_yes
citizenRuButtonYesTextCallbackData = config_message.citizen_ru_button_yes_callback_data

citizenRuButtonNoText = config_message.citizen_ru_button_no
citizenRuButtonNoTextCallbackData = config_message.citizen_ru_button_no_callback_data

userCitizenRuText = config_message.user_citizen_ru_text
userCitizenRuError = config_message.user_citizen_ru_error

registrationSucsess = config_message.registration_sucsess
buttonResultName = config_message.button_result_name

alreadyRegistered = config_message.already_registered

geolocator = None

nuberPhone = None
city = None
lastname = None
firstname = None
middlename = None
dataOfBirth = None       
citizenRF = None





user_id = None



cityTrue = 'False'

check_user_id = None




nalogacc = None
agreeaccaunt = None
passport = None


id_nubmer_list = None

last_sent_message = None
last_message_id = None  


humanCount = None
needText = None

editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'

error_reported = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞


check_mess_already_send = False


user_last_message_ids = {}

user_message_ids = {}

user_chat_ids = {}



isOpenEdit = False

data_called = False  

samozanYorN = None


orderTake = None
orderDone = None
orderMiss = None

user_id_mess = None
# test = False
# test2 = None
orderTakeTwo = ''


fioFirstFriend = None
fioSecondFriend = None
fioThirdFriend = None


phoneNumberFirstFriend = None
phoneNumberSecondFriend = None
phoneNumberThirdFriend = None

checkThirdFriend = False
checkFourthFriend = False




# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# def database_monitor():
#     while True:
#         conn = sqlite3.connect('applicationbase.sql')
#         cur = conn.cursor()

#         try:
#             cur.execute('SELECT * FROM orders ORDER BY id DESC LIMIT 1')
#             users = cur.fetchone()

#             if users is not None:
#                 # –í–∞—à –∫–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#                 # ...
#             else:
#                 print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')

#         except sqlite3.Error as e:
#             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
#             pass

#         cur.close()
#         conn.close()
#         time.sleep(3)
@dp.message_handler(commands=['start'])
async def registration(message: types.Message):
    global check_mess_already_send
    global user_id
    global check_user_id
    global last_sent_message
    global humanCount
    global needText
    global last_message_id
    global error_reported
    global user_last_message_ids
    global user_message_ids
    global user_chat_ids
    global data_called
    global user_id_mess

    data_called = False

    user_id = message.from_user.id
    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()
    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam = cursor.fetchone()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

    if takeParam:
        check_user_id = takeParam[9]
    else:
        check_user_id = None
    conn.close()

    if check_user_id is not None or user_id is not None:
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úÖ\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!\n–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π.\n\n‚ÑπÔ∏è–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç). –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ" –Ω–∞ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"üëáüëáüëá', parse_mode='html')
        userCitizenRuText = f'üëâ–ü–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)
        markup.row(btn3)
        await message.answer(userCitizenRuText, reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)
        await message.answer(f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)

    while True:
        conn = sqlite3.connect('applicationbase.sql')
        cur = conn.cursor()

        try:
            cur.execute('SELECT * FROM orders ORDER BY id DESC LIMIT 1')
            users = cur.fetchone()

            if users is not None:
                if (int(users[3]) <= 1) or (int(users[3]) >= 5):
                    humanCount = '—á–µ–ª–æ–≤–µ–∫'
                else:
                    humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'

                if int(users[3]) > 1:
                    needText = '–ù—É–∂–Ω–æ'
                else:
                    needText = '–ù—É–∂–µ–Ω'

                if (int(users[3]) <= 1):
                    markup2 = types.InlineKeyboardMarkup()
                    btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                    btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                    markup2.row(btn12)
                    markup2.row(btn52)
                elif (int(users[3]) == 2):
                    markup2 = types.InlineKeyboardMarkup()
                    btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                    btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                    btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                    markup2.row(btn12)
                    markup2.row(btn22)
                    markup2.row(btn52)
                elif (int(users[3]) == 3):
                    markup2 = types.InlineKeyboardMarkup()
                    btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                    btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                    btn32 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 3', callback_data='–ï–¥–µ–º –≤ 3', one_time_keyboard=True)
                    btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                    markup2.row(btn12)
                    markup2.row(btn22)
                    markup2.row(btn32)
                    markup2.row(btn52)
                elif (int(users[3]) >= 4):
                    markup2 = types.InlineKeyboardMarkup()
                    btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                    btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                    btn32 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 3', callback_data='–ï–¥–µ–º –≤ 3', one_time_keyboard=True)
                    btn42 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 4', callback_data='–ï–¥–µ–º –≤ 4', one_time_keyboard=True)
                    btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                    markup2.row(btn12)
                    markup2.row(btn22)
                    markup2.row(btn32)
                    markup2.row(btn42)
                    markup2.row(btn52)

                order_info = f'‚úÖ\n<b>‚Ä¢{users[2]}: </b>{needText} {users[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {users[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {users[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {users[6]}\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{users[7]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'

                if order_info != last_sent_message:
                    conn = sqlite3.connect('applicationbase.sql')
                    cursor = conn.cursor()

                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_id_mess = users[0]
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ message_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute("SELECT orderMessageId FROM orders WHERE id = ('%s')" % (user_id_mess))
                    current_message_ids_str = cursor.fetchone()[0]

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞)
                    current_message_ids = current_message_ids_str.split(',') if current_message_ids_str else []

                    messageChatId = message.chat.id
                    sent_message = await bot.send_message(messageChatId, order_info, reply_markup=markup2, parse_mode='html')
                    last_message_id = sent_message.message_id

                    user_chat_id_str = user_chat_ids.get(user_id_mess, "")
                    if user_chat_id_str:
                        user_chat_id_str += ","
                    user_chat_id_str += str(messageChatId)
                    user_chat_ids[user_id_mess] = user_chat_id_str

                    user_message_id_list = user_message_ids.get(user_id_mess, [])
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π message_id
                    user_message_id_list.append(last_message_id)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ
                    user_message_ids[user_id_mess] = user_message_id_list
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π message_id
                    last_message_id_str = str(last_message_id)
                    current_message_ids.append(last_message_id_str)

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                    updated_message_ids_str = ','.join(current_message_ids)

                    for user_id_mess, message_id_list in user_message_ids.items():
                        updated_message_ids_str = ','.join(map(str, message_id_list))
                        sql_query = "UPDATE orders SET orderMessageId = ('%s'), orderChatId = ('%s') WHERE id = ('%s')"
                        cursor.execute(sql_query % (updated_message_ids_str, user_chat_id_str, user_id_mess))

                    # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    conn.commit()
                    last_sent_message = order_info
                    check_mess_already_send = False
                else:
                    print('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
            
            cur.close()
            conn.close()
            time.sleep(3)
        except sqlite3.Error as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            if not error_reported:
                print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')
                error_reported = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

        conn.close()

if __name__ == '__main__':
    print('Bot started')

    executor.start_polling(dp, skip_updates=True)
