import telebot
from telebot import types
import sqlite3
from geopy.geocoders import Nominatim
from datetime import datetime
import time

import re

import  get_orders_config.get_orders_API_key as API_key
import get_orders_config.get_orders_sqlBase as sqlBase
import  get_orders_config.get_orders_config_message as config_message


botApiKey = API_key.botAPI

bot = telebot.TeleBot(botApiKey)

base = sqlBase.createDatabase
insertIntoBase = sqlBase.insertIntoDatabase
nameOfBase = sqlBase.name_of_base

maxSymbol = config_message.max_symbol_for_message

phoneButtonText = config_message.phone_button_text
phoneMessageText = config_message.message_to_send_phonenumber
phoneError = config_message.phone_error

geolocationButtonText = config_message.geolocation_button_text
geolocationMessageText = config_message.message_to_send_geolocation
geolocationNameApp = config_message.geolocator_name_app
foundedCity = config_message.founded_city
geolocationError = config_message.geolocation_error

lastnameText = config_message.input_lastname_text
lastnameError = config_message.lastname_error

firstnameText = config_message.input_firstname_text
firstnameError = config_message.firstname_error

middlenameText = config_message.input_middlename_text
middlenameError = config_message.middlename_error

dataOfBirthday = config_message.input_bitrhday_data_text
dateType = config_message.date_type
dateError = config_message.date_error

textOnly = config_message.message_should_be_text_type

citizenRuButtonYesText = config_message.citizen_ru_button_yes
citizenRuButtonYesTextCallbackData = config_message.citizen_ru_button_yes_callback_data

citizenRuButtonNoText = config_message.citizen_ru_button_no
citizenRuButtonNoTextCallbackData = config_message.citizen_ru_button_no_callback_data

userCitizenRuText = config_message.user_citizen_ru_text
userCitizenRuError = config_message.user_citizen_ru_error

registrationSucsess = config_message.registration_sucsess
buttonResultName = config_message.button_result_name

alreadyRegistered = config_message.already_registered

geolocator = None

nuberPhone = None
city = None
lastname = None
firstname = None
middlename = None
dataOfBirth = None       
citizenRF = None

passport = None

user_id = None



cityTrue = False

check_user_id = None




nalogacc = None





editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'

@bot.message_handler(commands=['start'])
def registration(message):
    global user_id
    global check_user_id
    conn = sqlite3.connect('user_data.sql')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
    (user_id INTEGER PRIMARY KEY, username TEXT)''')
    conn.commit()
    
    user_id = message.from_user.id
    username = message.from_user.username

    

  
    
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES ('%s', '%s')" % (user_id, username))
    conn.commit()
    conn.close()

    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()
          # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    
    if takeParam:
        check_user_id = takeParam[9]
    else:
        check_user_id = None
    conn.close()

    if check_user_id is not None or user_id is not None:
        bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úÖ\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!\n–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π.\n\n‚ÑπÔ∏è–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç). –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ" –Ω–∞ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"üëáüëáüëá', parse_mode='html')
        userCitizenRuText = f'üëâ–ü–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.send_message(message.chat.id, userCitizenRuText, reply_markup=markup)  
    else:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)          
        bot.send_message(message.chat.id, f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)



    
    

@bot.message_handler(commands=['data'])
def data(message):
    global user_id

    global city

    
    global cityTrue


    global nuberPhone
    global city
    global lastname
    global firstname
    global middlename
    global dataOfBirth       
    global citizenRF 

    global check_user_id
    conn = sqlite3.connect('user_data.sql')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
    (user_id INTEGER PRIMARY KEY, username TEXT)''')
    conn.commit()
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES ('%s', '%s')" % (user_id, username))
    conn.commit()
    conn.close()
    
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    
    if takeParam:
        check_user_id = takeParam[9]
    else:
        check_user_id = None
    conn.close()
    
    if takeParam:
        nuberPhone = takeParam[2]
        city = takeParam[3]
        lastname = takeParam[4]
        firstname = takeParam[5]
        middlename = takeParam[6]
        dataOfBirth = takeParam[7]        
        citizenRF = takeParam[8]   

    else:
        print('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()
    if check_user_id is not None or user_id is not None:
        if cityTrue is False:
            markup = types.InlineKeyboardMarkup()
            btn2 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥', one_time_keyboard=True)
            btn3 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', one_time_keyboard=True)
            markup.row(btn2)  
            markup.row(btn3)  
            bot.send_message(message.chat.id, f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: –ù–µ—Ç \nüèô –ì–æ—Ä–æ–¥(–∞): {city}\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', reply_markup=markup)
            print('–ø–µ—Ä–≤—ã–π –∏—Ñ',check_user_id, '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ', user_id)
        else:
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', one_time_keyboard=True)
            btn2 = types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤', callback_data='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤', one_time_keyboard=True)
            btn3 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', one_time_keyboard=True)
            btn4 = types.InlineKeyboardButton('‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å', one_time_keyboard=True)
            markup.row(btn1)  
            markup.row(btn2)  
            markup.row(btn3)  
            markup.row(btn4)  
            bot.send_message(message.chat.id, f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: –ù–µ—Ç \nüèô –ì–æ—Ä–æ–¥(–∞): {city}\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', reply_markup=markup)
            print('–ø–µ—Ä–≤—ã–π —ç–ª—Å',check_user_id, '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ', user_id)
    else:
        print('–≤—Ç–æ—Ä–æ–π –∏—Ñ',check_user_id, '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ', user_id)
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)          
        bot.send_message(message.chat.id, f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)



@bot.message_handler(commands=['orders'])
def orders(message):

    global check_user_id
    conn = sqlite3.connect('user_data.sql')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
    (user_id INTEGER PRIMARY KEY, username TEXT)''')
    conn.commit()
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES ('%s', '%s')" % (user_id, username))
    conn.commit()
    conn.close()
    
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    
    if takeParam:
        check_user_id = takeParam[9]
    else:
        check_user_id = None
    conn.close()
    if check_user_id is not None or user_id is not None:
        usercitizenRF = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –∏ –±–µ—Ä–∏—Ç–µ —Ç–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.'   
        bot.send_message(message.chat.id, usercitizenRF)
    else:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)          
        bot.send_message(message.chat.id, f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)



def input_birtgday(message):
    bot.send_message(message.chat.id, dataOfBirthday, parse_mode='html')
    bot.register_next_step_handler(message, user_birthday_check)

def get_date(text):
    try:
        date = datetime.strptime(text, dateType)
        return date.strftime(dateType)
    except ValueError:
        return None

def user_birthday_check(message):
    global dataOfBirth    
    try:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_birtgday(message)
        else:
            dataOfBirth = get_date(message.text.strip())
            if dataOfBirth:
                print('OP')
            else:
                bot.send_message(message.chat.id, dateError)
                bot.register_next_step_handler(message, user_birthday_check)
    except ValueError:
        bot.send_message(message.chat.id, dateError)
        bot.register_next_step_handler(message, user_birthday_check)



def input_birtgday2(message):
    bot.send_message(message.chat.id, dataOfBirthday, parse_mode='html')
    bot.register_next_step_handler(message, user_birthday_check2)

def get_date2(text):
    try:
        date = datetime.strptime(text, dateType)
        return date.strftime(dateType)
    except ValueError:
        return None

def user_birthday_check2(message):
    global dataOfBirth    
    try:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_birtgday2(message)
        else:
            dataOfBirth = get_date2(message.text.strip())
            if dataOfBirth:
                print('OP')
            else:
                bot.send_message(message.chat.id, dateError)
                bot.register_next_step_handler(message, user_birthday_check2)
    except ValueError:
        bot.send_message(message.chat.id, dateError)
        bot.register_next_step_handler(message, user_birthday_check2)



@bot.callback_query_handler(func=lambda callback: callback.data == 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
@bot.callback_query_handler(func=lambda callback: callback.data == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤') 
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å')
def callback_data_of_data(callback): 
    global cityTrue
    if callback.data == 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        cityTrue = False
        data(callback.message)

    elif callback.data == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤':        
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.send_message(callback.message.chat.id, f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n‚Ä¢ –í–∑—è–ª 0\n‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–ª 0 (0%)\n‚Ä¢ –ë—Ä–∞–∫ 0 (0%)', reply_markup=markup)

    elif callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç': 
        print(nuberPhone , lastname)
        bot.edit_message_text(f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: –ù–µ—Ç \nüèô –ì–æ—Ä–æ–¥(–∞): {city}', callback.message.chat.id, callback.message.message_id)
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        input_lastname(callback.message)   
    elif callback.data == '‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å': 
        bot.edit_message_text(f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: –ù–µ—Ç \nüèô –ì–æ—Ä–æ–¥(–∞): {city}', callback.message.chat.id, callback.message.message_id)
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ö—Ç–æ —Ç–∞–∫–æ–π —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π‚ùì', callback_data='–ö—Ç–æ —Ç–∞–∫–æ–π —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π‚ùì', one_time_keyboard=True, url='https://npd.nalog.ru/')
        btn2 = types.InlineKeyboardButton('‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', callback_data='‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∞–Ω', one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', one_time_keyboard=True)
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', one_time_keyboard=True)

        markup.row(btn1)
        markup.row(btn2)
        markup.row(btn3)
        markup.row(btn4)  
                
                
        bot.send_message(callback.message.chat.id, f'1. –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—á–∏–∫–∏ –∏–º–µ—é—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É.\n2. –ü–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n3. –£ –≤–∞—Å –±—É–¥–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∞–ª–æ–≥–∏ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–πü§ù?', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∞–Ω')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
def callback_individual(callback): 
    global editButtonText1
    global editButtonText2
    global editButtonText3
    

    editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
    editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
    editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'

    if callback.data == '‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True)        

        markup.row(btn1, btn2, btn3)

        bot.send_message(callback.message.chat.id, f'üè¶ –ö–∞–∫–∏–º –±–∞–Ω–∫–æ–º –ø–æ–ª—å–∑—É–µ—à—å—Å—è?', reply_markup=markup)

    elif callback.data == '‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.edit_message_text(f'1. –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—á–∏–∫–∏ –∏–º–µ—é—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É.\n2. –ü–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n3. –£ –≤–∞—Å –±—É–¥–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∞–ª–æ–≥–∏ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–πü§ù?', callback.message.chat.id, callback.message.message_id)
    elif callback.data == '‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∞–Ω':
        input_my_nalog_accaunt(callback.message)


def input_my_nalog_accaunt(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å2', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (20 —Ü–∏—Ñ—Ä, –Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö)', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, my_nalog_accaunt_check)   

def my_nalog_accaunt_check(message):
    global nalogacc
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_my_nalog_accaunt(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_my_nalog_accaunt(message) 
        else:
            nalogacc = message.text.strip()
            print(nalogacc)


@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å2')
def callback_bank(callback):
    if callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å2': 
        bot.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (20 —Ü–∏—Ñ—Ä, –Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö)', callback.message.chat.id, callback.message.message_id)
        data(callback.message)


@bot.callback_query_handler(func=lambda callback: callback.data == editButtonText1)
@bot.callback_query_handler(func=lambda callback: callback.data == editButtonText2)
@bot.callback_query_handler(func=lambda callback: callback.data == editButtonText3)
def callback_bank(callback): 
    
    global editButtonText1
    global editButtonText2
    global editButtonText3
    if callback.data == editButtonText1:
        editButtonText1 = '‚úÖ –°–±–µ—Ä–±–∞–Ω–∫'
        editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
        editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True)  
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)        

        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(f'–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å—ã –∏ —É—Å–ª—É–≥–∏¬ª\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª, –¥–∞–ª–µ–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å¬ª\n4. –í—ã–±–µ—Ä–∏—Ç–µ –î–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–û–û–û¬ª\n5. –î–∞–ª–µ–µ ¬´–£—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è¬ª –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n6. –ó–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –°–ú–° –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª –æ—Ç –°–±–µ—Ä–ë–∞–Ω–∫–∞, –∑–∞—Ç–µ–º –°–ú–° –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.sberbank.ru/ru/svoedelo#freeservices\n\n–ü—Ä–æ—à–µ–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', callback.message.chat.id, callback.message.message_id, reply_markup=markup)   
    elif callback.data == editButtonText2:
        editButtonText2 = '‚úÖ–¢–∏–Ω—å–∫–æ—Ñ—Ñ'        
        editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
        editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True)        
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)     

        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(f'–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –û–Ω–ª–∞–π–Ω\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å—ã –∏ —É—Å–ª—É–≥–∏¬ª\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª, –¥–∞–ª–µ–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å¬ª\n4. –í—ã–±–µ—Ä–∏—Ç–µ –î–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–û–û–û¬ª\n5. –î–∞–ª–µ–µ ¬´–£—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è¬ª –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n6. –ó–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –°–ú–° –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª –æ—Ç –°–±–µ—Ä–ë–∞–Ω–∫–∞, –∑–∞—Ç–µ–º –°–ú–° –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.sberbank.ru/ru/svoedelo#freeservices\n\n–ü—Ä–æ—à–µ–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
    elif callback.data == editButtonText3:
        editButtonText3 = '‚úÖ–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
        editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
        editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True) 
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)            

        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(f'–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –î—Ä—É–≥–æ–π –±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å—ã –∏ —É—Å–ª—É–≥–∏¬ª\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª, –¥–∞–ª–µ–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å¬ª\n4. –í—ã–±–µ—Ä–∏—Ç–µ –î–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–û–û–û¬ª\n5. –î–∞–ª–µ–µ ¬´–£—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è¬ª –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n6. –ó–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –°–ú–° –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª –æ—Ç –°–±–µ—Ä–ë–∞–Ω–∫–∞, –∑–∞—Ç–µ–º –°–ú–° –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.sberbank.ru/ru/svoedelo#freeservices\n\n–ü—Ä–æ—à–µ–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
   


@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
def callback_edit_data_person(callback): 
    if callback.data == '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        bot.send_message(callback.message.chat.id, f'–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!', parse_mode='html')

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û', one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†', one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°', one_time_keyboard=True)        
        btn4 = types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å(–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:2)', callback_data='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', one_time_keyboard=True)
        btn5 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Å—Ç–∞—Ç—å—Å—è —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º', callback_data='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', one_time_keyboard=True)

        markup.row(btn1)
        markup.row(btn2)
        markup.row(btn3)
        markup.row(btn4)
        markup.row(btn5)
        bot.send_message(callback.message.chat.id, f'–§–ò–û: <u>{lastname} {firstname} {middlename}</u>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û')
@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†')
@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
def callback_edit_person_data_alone(callback): 
    if callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û':
        input_lastname2(callback.message)
    elif callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†':
        user_birthday_check2(callback.message)
    elif callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°':
        input_passport(callback.message)
    elif callback.data == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        bot.answer_callback_query(callback_query_id=callback.id, text='–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')        
        bot.edit_message_text(f'–§–ò–û: <u>{lastname} {firstname} {middlename}</u>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', callback.message.chat.id, callback.message.message_id)

    elif callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.edit_message_text(f'–§–ò–û: <u>{lastname} {firstname} {middlename}</u>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', callback.message.chat.id, callback.message.message_id)


def input_lastname2(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\nüñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, lastneme_check2)   

def lastneme_check2(message):
    global lastname
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_lastname2(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_lastname2(message) 
        else:
            lastname = message.text.strip()
            print(lastname)
            input_firstname2(message)


def input_firstname2(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, firstname_check2)

def firstname_check2(message):       
    global firstname
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_firstname2(message)
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, firstnameError)
            message.text.strip(None)
            input_firstname2(message)        
        else:                  
            firstname = message.text.strip()    
            print(firstname_check)
            input_middlename2(message)
        
def input_middlename2(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ—Ç—á–µ—Å—Ç–≤–æ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, middlename_check2)

def middlename_check2(message):      
    global middlename
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_middlename2(message)
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, middlenameError)
            message.text.strip(None)
            input_middlename2(message) 
        else:     
            middlename = message.text.strip()
            print(middlename_check)





@bot.callback_query_handler(func=lambda callback: callback.data == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
def callback_delete_previos_message(callback): 
    if callback.data == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        data(callback.message)


def input_lastname(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\nüñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, lastneme_check)   

def lastneme_check(message):
    global lastname
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_lastname(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_lastname(message) 
        else:
            lastname = message.text.strip()
            print(lastname)
            input_firstname(message)


def input_firstname(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, firstname_check)

def firstname_check(message):       
    global firstname
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_firstname(message)
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, firstnameError)
            message.text.strip(None)
            input_firstname(message)        
        else:                  
            firstname = message.text.strip()    
            print(firstname_check)
            input_middlename(message)
        
def input_middlename(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ—Ç—á–µ—Å—Ç–≤–æ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, middlename_check)

def middlename_check(message):      
    global middlename
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_middlename(message)
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, middlenameError)
            message.text.strip(None)
            input_middlename(message) 
        else:     
            middlename = message.text.strip()
            print(middlename_check)
            input_passport(message)


def input_passport(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, '‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX YYYYYY, –≥–¥–µ XXXX - —Å–µ—Ä–∏—è, YYYYYY - –Ω–æ–º–µ—Ä.', parse_mode='html', reply_markup=markup)

@bot.message_handler(func=lambda message: bool(re.match(r'^\d{4} \d{6}$', message.text))) 
def passport_check(message):      
    global passport    
    passport = message.text.strip()
    print(passport)
    readyPassportInfo(message)

@bot.message_handler(func=lambda message: True) 
def passport_check(message):      
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã', parse_mode='html')
    input_passport(message)


def readyPassportInfo(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û', one_time_keyboard=True)
    btn2 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†', one_time_keyboard=True)
    btn3 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°', one_time_keyboard=True)        
    btn4 = types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å(–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:2)', callback_data='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', one_time_keyboard=True)
    btn5 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Å—Ç–∞—Ç—å—Å—è —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º', callback_data='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', one_time_keyboard=True)

    markup.row(btn1)
    markup.row(btn2)
    markup.row(btn3)
    markup.row(btn4)
    markup.row(btn5)
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Ñ–∏–æ/–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è/—Å–µ—Ä–∏—è+–Ω–æ–º–µ—Ä)\n\n–§–ò–û: {lastname} {firstname} {middlename}\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', parse_mode='html', reply_markup=markup)



@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') 
def callback_rename_city(callback): 
    global cityTrue
  
    if callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥':
        usercitizenRF = f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}'        
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"', callback_data=f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"', one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.edit_message_text(usercitizenRF, callback.message.chat.id, callback.message.message_id, reply_markup=markup)

    elif callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        cityTrue = True
        bot.edit_message_text('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', callback.message.chat.id, callback.message.message_id)
        data(callback.message)


@bot.callback_query_handler(func=lambda callback: callback.data == f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') 
def callback_delete_city(callback):   
    if callback.data == f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"':
        markup = types.InlineKeyboardMarkup()
        btn3 = types.InlineKeyboardButton('‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', one_time_keyboard=True) 
        markup.row(btn3)  
        bot.edit_message_text('–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å.', callback.message.chat.id, callback.message.message_id, reply_markup=markup)

    else:          
        bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', callback.message.chat.id, callback.message.message_id)

@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥') 
def callback_add_city(callback):   
    if callback.data == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥':
        locationCityCitizen(callback.message)        

    else:          
        bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', callback.message.chat.id, callback.message.message_id)


def locationCityCitizen(message):
    try:
        global geolocator
        keyboard = types.ReplyKeyboardMarkup()
        button_geo = types.KeyboardButton(text=geolocationButtonText, request_location=True)
        keyboard.add(button_geo)
        bot.send_message(message.chat.id, '‚ö†Ô∏è–í–∫–ª—é—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!‚ö†Ô∏è\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥üëáüëáüëá\n\n‚ÑπÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—èüï∞.', reply_markup=keyboard)  

        bot.register_next_step_handler(message, location)
        geolocator = Nominatim(user_agent = geolocationNameApp)    
    except Exception:        
        bot.send_message(message.chat.id, phoneError, parse_mode='html')
        bot.register_next_step_handler(message, locationCityCitizen)   

def city_check(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address'] 
    town = address.get('town', '')
    city = address.get('city', '')
    if town == '':
        town = city
    if city == '':
        city = town  

    return city

def location(message):
    global locationcity
    if message.location is not None:           
        a = [message.location.latitude, message.location.longitude]         
        city_name = city_check(a)
        locationcity = city_name
        bot.send_message(message.chat.id, f'{foundedCity} {locationcity}', reply_markup=types.ReplyKeyboardRemove())
        
        markup = types.InlineKeyboardMarkup()
        btn3 = types.InlineKeyboardButton('‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2', one_time_keyboard=True) 
        markup.row(btn3)  
        bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥. –¢–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 13 –¥–Ω–µ–π.\n–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', reply_markup=markup)            
    else:        
        bot.send_message(message.chat.id, geolocationError, parse_mode='html')
        bot.register_next_step_handler(message, location)   


@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2') 
def callback_message_citizen(callback):   
    if callback.data == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2':
        bot.answer_callback_query(callback_query_id=callback.id, text='–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',show_alert=True)
        data(callback.message)
    else:          
        bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', callback.message.chat.id, callback.message.message_id)


if __name__ == '__main__':
    print('Bot started')
    bot.polling(non_stop=True)
