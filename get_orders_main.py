import telebot
from telebot import types
import sqlite3
from geopy.geocoders import Nominatim
from datetime import datetime
import time

import  get_orders_config.get_orders_API_key as API_key
import get_orders_config.get_orders_sqlBase as sqlBase
import  get_orders_config.get_orders_config_message as config_message


botApiKey = API_key.botAPI

bot = telebot.TeleBot(botApiKey)

base = sqlBase.createDatabase
insertIntoBase = sqlBase.insertIntoDatabase
nameOfBase = sqlBase.name_of_base

maxSymbol = config_message.max_symbol_for_message

phoneButtonText = config_message.phone_button_text
phoneMessageText = config_message.message_to_send_phonenumber
phoneError = config_message.phone_error

geolocationButtonText = config_message.geolocation_button_text
geolocationMessageText = config_message.message_to_send_geolocation
geolocationNameApp = config_message.geolocator_name_app
foundedCity = config_message.founded_city
geolocationError = config_message.geolocation_error

lastnameText = config_message.input_lastname_text
lastnameError = config_message.lastname_error

firstnameText = config_message.input_firstname_text
firstnameError = config_message.firstname_error

middlenameText = config_message.input_middlename_text
middlenameError = config_message.middlename_error

dataOfBirthday = config_message.input_bitrhday_data_text
dateType = config_message.date_type
dateError = config_message.date_error

textOnly = config_message.message_should_be_text_type

citizenRuButtonYesText = config_message.citizen_ru_button_yes
citizenRuButtonYesTextCallbackData = config_message.citizen_ru_button_yes_callback_data

citizenRuButtonNoText = config_message.citizen_ru_button_no
citizenRuButtonNoTextCallbackData = config_message.citizen_ru_button_no_callback_data

userCitizenRuText = config_message.user_citizen_ru_text
userCitizenRuError = config_message.user_citizen_ru_error

registrationSucsess = config_message.registration_sucsess
buttonResultName = config_message.button_result_name

alreadyRegistered = config_message.already_registered

# phone = None
# lastname = None
# firstname = None
# middlename = None
# userbirthday = None
# usercitizenRF = None
# locationcity = None

# state = 'initial'

# previosMaxValue = 0

# max_id = 0

nuberPhone = None
city = None
lastname = None
firstname = None
middlename = None
dataOfBirth = None       
citizenRF = None

user_id = None

@bot.message_handler(commands=['start'])
def registration(message):
    global user_id
    # global my_variable
    bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úÖ\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!\n–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π.\n\n‚ÑπÔ∏è–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç). –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ" –Ω–∞ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"üëáüëáüëá', parse_mode='html')
    userCitizenRuText = f'üëâ–ü–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
    btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
    markup.row(btn2)  
    markup.row(btn3)  
    bot.send_message(message.chat.id, userCitizenRuText, reply_markup=markup)  
    
    conn = sqlite3.connect('user_data.sql')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
    (user_id INTEGER PRIMARY KEY, username TEXT)''')
    conn.commit()
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES ('%s', '%s')" % (user_id, username))
    conn.commit()
    conn.close()

@bot.message_handler(commands=['data'])
def data(message):
    global user_id

    global city

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()

    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

    if takeParam:
        nuberPhone = takeParam[2]
        city = takeParam[3]
        lastname = takeParam[4]
        firstname = takeParam[5]
        middlename = takeParam[6]
        dataOfBirth = takeParam[7]        
        citizenRF = takeParam[8]   

        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥', one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.send_message(message.chat.id, f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: –ù–µ—Ç \nüèô –ì–æ—Ä–æ–¥(–∞): {city}\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', reply_markup=markup)

    else:
        print('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()


# @bot.message_handler(commands=['orders'])
# def orders(message):
#     bot.send_message(message.chat.id, f'–¢—É—Ç –±—É–¥—É—Ç –≤–∞—à–∏ –∑–∞—è–≤–∫–∏', parse_mode='html')

@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') 
def callback_message_citizen(callback):   
    if callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥':
        usercitizenRF = f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}'        
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"', callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.edit_message_text(usercitizenRF, callback.message.chat.id, callback.message.message_id, reply_markup=markup)

    else:          
        usercitizenRF = '–ü–æ–∫–∞ –Ω–µ —Ä–æ–±–∏—Ç'
        # bot.edit_message_text(userCitizenRuText, callback.message.chat.id, callback.message.message_id)
    
        # bot.send_message(callback.message.chat.id, f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: –ù–µ—Ç \nüèô –ì–æ—Ä–æ–¥(–∞): {city}\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    # import_into_database(callback.message)


print('Bot started')

bot.polling(non_stop=True)
