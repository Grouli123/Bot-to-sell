import telebot
import webbrowser
from telebot import types
import sqlite3
import requests
import json
from geopy.geocoders import Nominatim
import time

# import config
from datetime import datetime
from dateutil.parser import parse

bot = telebot.TeleBot('6484701618:AAFcxH0T31Rl_XakKMfFm5PWsLwSIRzhcVE')

phone = None
lastname = None
firstname = None
middlename = None
userbirthday = None

usercitizenRF = None


geolocator = None
locationcity = None

cityname = '–ê—Ä–∑–∞–º–∞—Å'



state = 'initial'  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@bot.message_handler(commands=['start'])
def registration(message):
    conn = sqlite3.connect('peoplebase.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, datatime current_timestamp, phone varchar(50), city varchar(50), last_name varchar(50), firts_name varchar(50), middle_name varchar(50), birthday data, citizenRF varchar(50))')
    conn.commit() 
    cur.close()
    conn.close()
    
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button_phone)
    bot.send_message(message.chat.id, '<b><em>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É!</em></b>üëá \n\n–ü—Ä–∏–≤–µ—Ç!\n–î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\nü§ù\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ - –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\nüëáüëáüëáüëáüëá', reply_markup=keyboard, parse_mode='html')
    bot.register_next_step_handler(message, geolocation)   

def geolocation(message):
    global phone
    try:
        phone = message.contact.phone_number
        global geolocator
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button_geo)
        bot.send_message(message.chat.id, "‚ö†Ô∏è–í–∫–ª—é—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!‚ö†Ô∏è\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫üëáüëáüëá\n\n‚ÑπÔ∏è–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—èüï∞.", reply_markup=keyboard)
        bot.register_next_step_handler(message, location)
        geolocator = Nominatim(user_agent = "name_of_your_app")    
    except Exception:        
        bot.send_message(message.chat.id, '<b><em>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –ö–ù–û–ü–ö–ï –≤–Ω–∏–∑—É! \n\n–ï—Å–ª–∏ –≤—ã –µ—ë –Ω–µ –≤–∏–¥–∏—Ç–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ —Å–∫—Ä—ã—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á—É—Ç—å –ø—Ä–∞–≤–µ–µ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</em></b>üëá', parse_mode='html')
        bot.register_next_step_handler(message, geolocation)   


def city_state_country(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address'] 
    town = address.get('town', '')
    city = address.get('city', '')
    if town == '':
        town = city
    if city == '':
        city = town  

    return city

def location(message):
    global geolocator
    global locationcity
    if message.location is not None:           
        a = [message.location.latitude, message.location.longitude]         
        city_name = city_state_country(a)
        locationcity = city_name
        bot.send_message(message.chat.id, f'‚úÖ–ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ {locationcity}', reply_markup=types.ReplyKeyboardRemove())

        found_city(message)   
        
    else:        
        bot.send_message(message.chat.id, '<b><em>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ –ö–ù–û–ü–ö–ï –≤–Ω–∏–∑—É! \n\n–ï—Å–ª–∏ –≤—ã –µ—ë –Ω–µ –≤–∏–¥–∏—Ç–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ —Å–∫—Ä—ã—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á—É—Ç—å –ø—Ä–∞–≤–µ–µ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</em></b>üëá', parse_mode='html')
        bot.register_next_step_handler(message, location)   
        

def found_city(message):
    bot.send_message(message.chat.id, '–ï—â–µ –ø–∞—Ä—É —à–∞–≥–æ–≤ –∏ –º—ã —É —Ü–µ–ª–∏!\nüñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> —Ñ–∞–º–∏–ª–∏—é:', parse_mode='html')
    bot.register_next_step_handler(message, last_nameTrue)


# def last_name(message):
#     if len(message.text.strip()) > 50:
#         bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.')
#         found_city(message)         
#     else:
#         if len(message.text.strip()) <= 50:
#             last_nameTrue(message)
   

def last_nameTrue(message):
    global lastname
    if len(message.text.strip()) > 50:
        bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.')
        message.text.strip(None)
        found_city(message) 
    else:
        lastname = message.text.strip()
        print(lastname)
        testLastname(message)

def testLastname(message):
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> –∏–º—è:', parse_mode='html')
    bot.register_next_step_handler(message, first_name)

def first_name(message):       
    global firstname
    if len(message.text.strip()) > 50:
        bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.')
        message.text.strip(None)
        testLastname(message)        
    else:                  
        firstname = message.text.strip()    
        print(first_name)
        testFirstName(message)
        
def testFirstName(message):
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> –æ—Ç—á–µ—Å—Ç–≤–æ:', parse_mode='html')
    bot.register_next_step_handler(message, middle_name)

# def first_nameTrue(message):
#     global firstname
#     firstname = message.text.strip()    
#     bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> –æ—Ç—á–µ—Å—Ç–≤–æ:', parse_mode='html')
#     bot.register_next_step_handler(message, middle_name)

def middle_name(message):      
    global middlename
    if len(message.text.strip()) > 50:
        bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ.')
        message.text.strip(None)
        testFirstName(message) 
    else:     
        middlename = message.text.strip()
        print(middle_name)
        testMiddleName(message)

def testMiddleName(message):
    bot.send_message(message.chat.id, 'üñå –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥¬ª –ø—Ä–∏–º–µ—Ä: 01.01.1990', parse_mode='html')
    bot.register_next_step_handler(message, user_birthday)

# def middle_nameTrue(message):    
#     global middlename
#     middlename = message.text.strip()
#     bot.send_message(message.chat.id, 'üñå –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥¬ª –ø—Ä–∏–º–µ—Ä: 01.01.1990', parse_mode='html')
#     bot.register_next_step_handler(message, user_birthday)

def get_date(text):
    try:
        date = datetime.strptime(text, '%d.%m.%Y')
        return date.strftime('%d.%m.%Y')
    except ValueError:
        return None

def user_birthday(message):
    global userbirthday
    try:
        userbirthday = get_date(message.text.strip())
        if userbirthday:
            citizenRU(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –î–î.–ú–ú.–ì–ì–ì–ì')
            bot.register_next_step_handler(message, user_birthday)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –î–î.–ú–ú.–ì–ì–ì–ì')
        bot.register_next_step_handler(message, user_birthday)
# def user_birthday(message):
#     global userbirthday
#     try:
#         userbirthday = parse(message.text.strip())
#         citizenRU(message)
#     except ValueError:
#         bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –î–î-–ú–ú-–ì–ì–ì–ì')
#         bot.register_next_step_handler(message, user_birthday)


def citizenRU(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('–î–∞', callback_data='delete', one_time_keyboard=True)
    btn3 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='edit', one_time_keyboard=True)
    markup.row(btn2, btn3)    
    bot.send_message(message.chat.id, '–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', reply_markup=markup)  

@bot.callback_query_handler(func=lambda callback: callback.data == 'delete')
@bot.callback_query_handler(func=lambda callback: callback.data == 'edit') 
def callback_messageYes(callback):   
    global usercitizenRF 
    if callback.data == 'delete':
        usercitizenRF = '–î–∞'        
        bot.edit_message_text('–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', callback.message.chat.id, callback.message.message_id)

    else:          
        usercitizenRF = '–ù–µ—Ç'
        bot.edit_message_text('–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', callback.message.chat.id, callback.message.message_id)

    
    bot.send_message(callback.message.chat.id, f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{phone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {userbirthday}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {usercitizenRF}\nüèô –ì–æ—Ä–æ–¥(–∞): {locationcity}')
    user_pass(callback.message)

@bot.message_handler(content_types=['text'])
def get_photo(message):          
        global state
        if state == 'initial':         
            bot.edit_message_text('–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', message.chat.id, message.message_id-1)
            bot.send_message(message.chat.id, f'<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b> \n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤—É', parse_mode='html')
            citizenRU(message)         
        elif state == 'citizenRU':
            # bot.edit_message_text('–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', message.chat.id, message.message_id-1)
            bot.send_message(message.chat.id, f'<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>', parse_mode='html')
            user_pass(message)
        else:
            bot.edit_message_text('–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', message.chat.id, message.message_id)



def user_pass(message):
    global usercitizenRF   
    global state  
    conn = sqlite3.connect('peoplebase.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (phone, city, last_name, firts_name, middle_name, birthday, citizenRF) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (phone, locationcity, lastname, firstname, middlename, userbirthday, usercitizenRF)) 
   
    conn.commit()
    cur.close()
    conn.close()
    

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(f'üëâ–ö–∞–Ω–∞–ª {cityname}', callback_data='users'))
       
    bot.send_message(message.chat.id, f'–ì–æ—Ç–æ–≤–æüññ\n–ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –∫–∞–Ω–∞–ª ¬´–ê—Ä–∑–∞–º–∞—Å¬ª (—Ç–∞–º –±—É–¥—É—Ç –∑–∞—è–≤–∫–∏)\n\n–ö–∞–∫ –ø–µ—Ä–µ–π–¥—ë—à—å - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–Ω–∞—á–∞—Ç—å/—Å—Ç–∞—Ä—Ç/start¬ª (–±–µ–∑ —ç—Ç–æ–≥–æ –∑–∞—è–≤–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è ‚ÄºÔ∏è )\n\nüëáüëáüëáüëáüëá', reply_markup=markup)
    
    state = 'citizenRU'

# @bot.message_handler(content_types=['text'])
# def get_photo(message):       
#         bot.edit_message_text('–Ø–≤–ª—è–µ—à—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏üá∑üá∫?', message.chat.id, message.message_id-1)
#         bot.send_message(message.chat.id, '–ù–µ —Ç–æ')
#         user_pass(message)

@bot.callback_query_handler(func=lambda call: call.data == 'users')
def callback(call):
    conn = sqlite3.connect('peoplebase.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    info = ''
    for el in users:
        info += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{el[2]}, –ì–æ—Ä–æ–¥: {el[3]}, –§–∞–º–∏–ª–∏—è: {el[4]}, –ò–º—è: {el[5]}, –û—Ç—á–µ—Å—Ç–≤–æ: {el[6]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[7]}, –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {el[8]}\n'

    cur.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)
    print(info)



print('Bot started')

bot.polling(non_stop=True)