import telebot
import webbrowser
from telebot import types
import sqlite3
import requests
import json
from geopy.geocoders import Nominatim

bot = telebot.TeleBot('6484701618:AAFcxH0T31Rl_XakKMfFm5PWsLwSIRzhcVE')

phone = None
lastname = None
firstname = None
middlename = None
userbirthday = None

geolocator = None
locationcity = None

@bot.message_handler(commands=['start'])
def registration(message):
    conn = sqlite3.connect('peoplebase.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, datatime current_timestamp, phone varchar(50), city varchar(50), last_name varchar(50), firts_name varchar(50), middle_name varchar(50), birthday data)')
    conn.commit() 
    cur.close()
    conn.close()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button_phone)
    bot.send_message(message.chat.id, '<b><em>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É!</em></b>üëá \n\n–ü—Ä–∏–≤–µ—Ç!\n–î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\nü§ù\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ - –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\nüëáüëáüëáüëáüëá', reply_markup=keyboard, parse_mode='html')
    bot.register_next_step_handler(message, geolocation)   

def geolocation(message):
    global phone
    phone = message.contact.phone_number
    global geolocator
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(button_geo)
    bot.send_message(message.chat.id, "‚ö†Ô∏è–í–∫–ª—é—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!‚ö†Ô∏è\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫üëáüëáüëá\n\n‚ÑπÔ∏è–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—èüï∞.", reply_markup=keyboard)
    bot.register_next_step_handler(message, location)
    geolocator = Nominatim(user_agent = "name_of_your_app")    

def city_state_country(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address'] 
    town = address.get('town', '')
    city = address.get('city', '')
    if town == '':
        town = city
    if city == '':
        city = town  

    return city

def location(message):
    global geolocator
    global locationcity
    if message.location is not None:
        a = [message.location.latitude, message.location.longitude]         
        city_name = city_state_country(a)
        locationcity = city_name
        found_city(message)
        print('–≤–æ—Ç ',message)

def found_city(message):
    bot.send_message(message.chat.id, f'‚úÖ–ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ {locationcity}')
    bot.send_message(message.chat.id, '–ï—â–µ –ø–∞—Ä—É —à–∞–≥–æ–≤ –∏ –º—ã —É —Ü–µ–ª–∏!\nüñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> —Ñ–∞–º–∏–ª–∏—é:', parse_mode='html')
    bot.register_next_step_handler(message, last_name)

def last_name(message):
    global lastname
    print('fuf')
    lastname = message.text.strip()
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> –∏–º—è:', parse_mode='html')
    bot.register_next_step_handler(message, first_name)
    print(lastname)

def first_name(message):
    global firstname
    firstname = message.text.strip()    
    bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ <b>–¢–û–õ–¨–ö–û</b> –æ—Ç—á–µ—Å—Ç–≤–æ:', parse_mode='html')

    bot.register_next_step_handler(message, middle_name)
    print(firstname)

def middle_name(message):
    global middlename
    middlename = message.text.strip()
    bot.send_message(message.chat.id, 'üñå –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥¬ª –ø—Ä–∏–º–µ—Ä: 01.01.1990', parse_mode='html')
    bot.register_next_step_handler(message, user_birthday)
    print(middlename, firstname, lastname)

def user_birthday(message):
    global userbirthday
    userbirthday = message.text.strip()
    user_pass(message)

def user_pass(message):
    userbirthday = message.text.strip()

    conn = sqlite3.connect('peoplebase.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (phone, city, last_name, firts_name, middle_name, birthday) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')" % (phone, locationcity, lastname, firstname, middlename, userbirthday)) 
   
    conn.commit()
    cur.close()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    conn = sqlite3.connect('peoplebase.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    info = ''
    for el in users:
        info += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {el[2]}, –ì–æ—Ä–æ–¥: {el[3]}, –§–∞–º–∏–ª–∏—è: {el[4]}, –ò–º—è: {el[5]}, –û—Ç—á–µ—Å—Ç–≤–æ: {el[6]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[7]}\n'

    cur.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)
    print(info)

@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        print(message.contact)

print('Bot started')

bot.polling(non_stop=True)