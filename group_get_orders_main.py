import telebot
from telebot import types
import sqlite3
from geopy.geocoders import Nominatim
from datetime import datetime
import time

import re

import  get_orders_config.get_orders_API_key as API_key
# import get_orders_config.get_orders_sqlBase as sqlBase
import  get_orders_config.get_orders_config_message as config_message


botApiKey = API_key.botAPIArz

bot = telebot.TeleBot(botApiKey)

# base = sqlBase.createDatabase
# insertIntoBase = sqlBase.insertIntoDatabase
# nameOfBase = sqlBase.name_of_base

maxSymbol = config_message.max_symbol_for_message

phoneButtonText = config_message.phone_button_text
phoneMessageText = config_message.message_to_send_phonenumber
phoneError = config_message.phone_error

geolocationButtonText = config_message.geolocation_button_text
geolocationMessageText = config_message.message_to_send_geolocation
geolocationNameApp = config_message.geolocator_name_app
foundedCity = config_message.founded_city
geolocationError = config_message.geolocation_error

lastnameText = config_message.input_lastname_text
lastnameError = config_message.lastname_error

firstnameText = config_message.input_firstname_text
firstnameError = config_message.firstname_error

middlenameText = config_message.input_middlename_text
middlenameError = config_message.middlename_error

dataOfBirthday = config_message.input_bitrhday_data_text
dateType = config_message.date_type
dateError = config_message.date_error

textOnly = config_message.message_should_be_text_type

citizenRuButtonYesText = config_message.citizen_ru_button_yes
citizenRuButtonYesTextCallbackData = config_message.citizen_ru_button_yes_callback_data

citizenRuButtonNoText = config_message.citizen_ru_button_no
citizenRuButtonNoTextCallbackData = config_message.citizen_ru_button_no_callback_data

userCitizenRuText = config_message.user_citizen_ru_text
userCitizenRuError = config_message.user_citizen_ru_error

registrationSucsess = config_message.registration_sucsess
buttonResultName = config_message.button_result_name

alreadyRegistered = config_message.already_registered

geolocator = None

nuberPhone = None
city = None
lastname = None
firstname = None
middlename = None
dataOfBirth = None       
citizenRF = None





user_id = None



cityTrue = 'False'

check_user_id = None




nalogacc = None
agreeaccaunt = None
passport = None


id_nubmer_list = None

last_sent_message = None
last_message_id = None  


humanCount = None
needText = None

editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'

error_reported = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞


check_mess_already_send = False


user_last_message_ids = {}

user_message_ids = {}

user_chat_ids = {}



isOpenEdit = False

data_called = False  

samozanYorN = None


orderTake = None
orderDone = None
orderMiss = None

user_id_mess = None
orderTakeTwo = ''


fioFirstFriend = None
fioSecondFriend = None
fioThirdFriend = None


phoneNumberFirstFriend = None
phoneNumberSecondFriend = None
phoneNumberThirdFriend = None

checkThirdFriend = False
checkFourthFriend = False

# messageChatId = '1098274481'
messageChatId = None

global_user_id = None

test = None


@bot.message_handler(commands=['start'])
def registration(message):
    global check_mess_already_send
    global user_id
    global check_user_id
    global last_sent_message

    global humanCount
    global needText
    global last_message_id
    global error_reported
    global user_last_message_ids
    global user_message_ids

    global user_chat_ids
    global data_called

    global messageChatId

    data_called = False

    messageChatId = message.chat.id

    print(messageChatId)
    
    user_id = message.from_user.id

    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()
          # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

    

    if takeParam:
        check_user_id = takeParam[9]

    else:
        check_user_id = None

    cursor.execute("UPDATE users SET botChatId = ('%s') WHERE user_id = ('%s')" % (messageChatId, user_id))
    conn.commit()
    cursor.close()
    conn.close()



    if check_user_id is not None or user_id is not None:
        bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úÖ\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!\n–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π.\n\n‚ÑπÔ∏è–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç). –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ" –Ω–∞ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"üëáüëáüëá', parse_mode='html')
        userCitizenRuText = f'üëâ–ü–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.send_message(message.chat.id, userCitizenRuText, reply_markup=markup)  
    else:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)          
        bot.send_message(message.chat.id, f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)

    

def testMethod():
    global check_mess_already_send
    global check_user_id
    global last_sent_message

    global humanCount
    global needText
    global last_message_id
    global error_reported
    global user_last_message_ids
    global user_message_ids

    global user_chat_ids
    global data_called
    global user_id_mess
    data_called = False

    conn5 = sqlite3.connect('peoplebase.sql')
    cur5 = conn5.cursor()
    cur5.execute("SELECT botChatId FROM users")
    

    results = cur5.fetchall()


    conn = sqlite3.connect('applicationbase.sql')
    cur = conn.cursor()

    print('–ê —Ç—É—Ç?', messageChatId)
    try:
        cur.execute("SELECT * FROM orders ORDER BY id DESC LIMIT 1")
        users = cur.fetchone() 
            

        
        if users is not None:
            if (int(users[3]) <= 1) or (int(users[3]) >= 5):
                humanCount = '—á–µ–ª–æ–≤–µ–∫'
            else:
                humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
                    
            if int(users[3]) > 1:
                needText = '–ù—É–∂–Ω–æ'
            else:
                needText = '–ù—É–∂–µ–Ω'

            if (int(users[3]) <= 1):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn52)            
            elif (int(users[3]) == 2):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn22)  
                markup2.row(btn52) 
            elif (int(users[3]) == 3):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                btn32 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 3', callback_data='–ï–¥–µ–º –≤ 3', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn22)  
                markup2.row(btn32)  
                markup2.row(btn52) 
            elif (int(users[3]) >= 4):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                btn32 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 3', callback_data='–ï–¥–µ–º –≤ 3', one_time_keyboard=True)
                btn42 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 4', callback_data='–ï–¥–µ–º –≤ 4', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn22)  
                markup2.row(btn32)  
                markup2.row(btn42)  
                markup2.row(btn52) 
            
                
            order_info = f'‚úÖ\n<b>‚Ä¢{users[2]}: </b>{needText} {users[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {users[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {users[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {users[6]}\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{users[7]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'
                
                
            if order_info != last_sent_message:
                    
                print('—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–ª—Å–µ')

                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id_mess = users[0]
                print(user_id_mess)
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ message_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cur.execute("SELECT orderMessageId FROM orders WHERE id = ('%s')" % (user_id_mess))
                current_message_ids_str = cur.fetchone()[0]
                    
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞)
                current_message_ids = current_message_ids_str.split(',') if current_message_ids_str else []
                
                for result in results:
                    botChatIdw = result[0]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ botChatId –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if botChatIdw != 'None':
                        print("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ botChatId:", botChatIdw)

                        sent_message = bot.send_message(botChatIdw, order_info, reply_markup=markup2, parse_mode='html')
                        last_message_id = sent_message.message_id  


                        user_chat_id_str = user_chat_ids.get(user_id_mess, "")
                        if user_chat_id_str:
                            user_chat_id_str += ","
                        user_chat_id_str += str(botChatIdw)
                        user_chat_ids[user_id_mess] = user_chat_id_str

                        user_message_id_list = user_message_ids.get(user_id_mess, [])
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π message_id
                        user_message_id_list.append(last_message_id)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ
                        user_message_ids[user_id_mess] = user_message_id_list
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π message_id
                        last_message_id_str = str(last_message_id)
                        current_message_ids.append(last_message_id_str)
                            
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                        updated_message_ids_str = ','.join(current_message_ids)
                cur5.close()
                conn5.close()   

                    

                
                for user_id_mess, message_id_list in user_message_ids.items():
                    updated_message_ids_str = ','.join(map(str, message_id_list))
                    sql_query = "UPDATE orders SET orderMessageId = ('%s'), orderChatId = ('%s') WHERE id = ('%s')"
                    cur.execute(sql_query % (updated_message_ids_str, user_chat_id_str, user_id_mess))

                # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn.commit()
                last_sent_message = order_info
                check_mess_already_send = False



                    
            else:
                print('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
                print(user_last_message_ids)

        else:                
            print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')
       

       
        cur.close()
        conn.close()
        time.sleep(3)
    except sqlite3.Error as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        if not error_reported:
                
            print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')
            error_reported = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
    
@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥—É 1')
@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥–µ–º –≤ 2') 
@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥–µ–º –≤ 3')
@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥–µ–º –≤ 4')
def callback_data_of_data(callback): 
    global orderTakeTwo
    global checkThirdFriend
    global checkFourthFriend
    global user_id_mess
    global test
    conn = sqlite3.connect('peoplebase.sql')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
    takeParam2 = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    print('—é–∑–µ—Ä –∞–π–¥–∏ ',user_id_mess)
    if takeParam2[9] != '':
        if takeParam2:
            orderTakeTwo = takeParam2[0]
            print(orderTakeTwo)
            print('—Ä–∞–±–æ—Ç–∞–µ—Ç')
        else:
            print('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

        if callback.data == '–ï–¥—É 1':
            test = callback.message.message_id

            cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
            takeOrderTake = cursor.fetchone()

            
            if takeOrderTake is not None:
                current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""


                conn3 = sqlite3.connect('applicationbase.sql')
                cur3 = conn3.cursor()
                cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
                users = cur3.fetchone() 
                print(callback.message.message_id)
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id_mess = users[0]
                
                cur3.close()
                conn3.close()

                new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))
                
                

            conn.commit()
            cursor.close()
            conn.close()

            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()        

            cursor2.execute("SELECT whoTakeId FROM orders WHERE orderMessageId = ('%s')" % (test))
            current_values = cursor2.fetchone()
            print('–∫–∞—Ä–µ–Ω—Ç –ø—Ö–æ–Ω ', current_values)
            if current_values is not None:
                current_phone_numbers = current_values[0] if current_values[0] else ""
                print(type(current_phone_numbers))
                print('nen ', current_phone_numbers)
                
                print('–¢—É—Ç ', orderTakeTwo)
                

                new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo

                print('–Ω–µ—é –ø—Ö–æ–Ω–µ', new_phone_numbers)

                cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))
                print(cursor2)
                conn2.commit()

            else:  
                print('—Ç—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

            cursor2.close()
            conn2.close()

        
            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()        


            



            cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            table_element = cursor2.fetchone()

            if table_element is not None:
                if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                    humanCount = '—á–µ–ª–æ–≤–µ–∫'
                else:
                    humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
                        
                if int(table_element[3]) > 1:
                    needText = '–ù—É–∂–Ω–æ'
                else:
                    needText = '–ù—É–∂–µ–Ω'

            order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[7]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'

            bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')

            bot.send_message(callback.message.chat.id, f'–ü—Ä–∏–Ω—è—Ç–æ, –≤—ã –µ–¥–µ—Ç–µ 1, –≤–∞—à –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: {user_id_mess}\n –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: {orderTakeTwo}') 
            conn2.commit()
            cursor2.close()
            conn2.close()
        elif callback.data == '–ï–¥–µ–º –≤ 2':
            test = callback.message.message_id

            conn3 = sqlite3.connect('applicationbase.sql')
            cur3 = conn3.cursor()
            cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            users = cur3.fetchone() 
            print(callback.message.message_id)
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_mess = users[0]
                
            cur3.close()
            conn3.close()

            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()        

            cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            table_element = cursor2.fetchone()

            if table_element is not None:
                if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                    humanCount = '—á–µ–ª–æ–≤–µ–∫'
                else:
                    humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
                        
                if int(table_element[3]) > 1:
                    needText = '–ù—É–∂–Ω–æ'
                else:
                    needText = '–ù—É–∂–µ–Ω'

            order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[7]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'

            bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')

            conn2.commit()
            cursor2.close()
            conn2.close()
            input_fio_first_friend(callback.message)

        elif callback.data == '–ï–¥–µ–º –≤ 3':
            test = callback.message.message_id

            
            conn3 = sqlite3.connect('applicationbase.sql')
            cur3 = conn3.cursor()
            cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            users = cur3.fetchone() 
            print(callback.message.message_id)
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_mess = users[0]
                
            cur3.close()
            conn3.close()

            checkThirdFriend = True
            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()        

            cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            table_element = cursor2.fetchone()

            if table_element is not None:
                if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                    humanCount = '—á–µ–ª–æ–≤–µ–∫'
                else:
                    humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
                        
                if int(table_element[3]) > 1:
                    needText = '–ù—É–∂–Ω–æ'
                else:
                    needText = '–ù—É–∂–µ–Ω'

            order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[7]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'

            bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')

            conn2.commit()
            cursor2.close()
            conn2.close()
            input_fio_first_friend(callback.message)
        elif callback.data == '–ï–¥–µ–º –≤ 4': 
            test = callback.message.message_id

            
            conn3 = sqlite3.connect('applicationbase.sql')
            cur3 = conn3.cursor()
            cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            users = cur3.fetchone() 
            print(callback.message.message_id)
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_mess = users[0]
                
            cur3.close()
            conn3.close()
            
            checkThirdFriend = True
            checkFourthFriend = True       
            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()        

            cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
            table_element = cursor2.fetchone()

            if table_element is not None:
                if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                    humanCount = '—á–µ–ª–æ–≤–µ–∫'
                else:
                    humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
                        
                if int(table_element[3]) > 1:
                    needText = '–ù—É–∂–Ω–æ'
                else:
                    needText = '–ù—É–∂–µ–Ω'

            order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[7]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'

            bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')

            conn2.commit()
            cursor2.close()
            conn2.close()
            input_fio_first_friend(callback.message)
    else:
        markup1 = types.InlineKeyboardMarkup()
        btn01 = types.InlineKeyboardButton('‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup1.row(btn01)
        bot.send_message(callback.message.chat.id, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='html', reply_markup= markup1)


def input_fio_first_friend(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§–ò–û –¥—Ä—É–≥–∞', parse_mode='html')
    bot.register_next_step_handler(message, fio_first_friend_check)

def fio_first_friend_check(message):
    global fioFirstFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_fio_first_friend(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_fio_first_friend(message) 
        else:
            fioFirstFriend = message.text.strip()
            print(fioFirstFriend)
            input_first_friend_number(message)

def input_first_friend_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞:', parse_mode='html')
    bot.register_next_step_handler(message, first_friend_number_check)

def first_friend_number_check(message):       
    global phoneNumberFirstFriend
    global checkThirdFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_first_friend_number(message)
    else:
        if len(message.text.strip()) != 11:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            message.text.strip(None)
            input_first_friend_number(message)        
        else:               
            if message.text.isdigit():
                phoneNumberFirstFriend = message.text.strip()    
                if checkThirdFriend is True:          
                    checkThirdFriend = False
                    input_fio_second_friend(message)           
                    print(checkThirdFriend)
                else:  

                    conn = sqlite3.connect('peoplebase.sql')
                    cursor = conn.cursor()
                    cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor.fetchone()

                    if takeOrderTake is not None:
                        current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""

                        


                        new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                        cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))

                    conn.commit()
                    cursor.close()
                    conn.close()


                    conn2 = sqlite3.connect('applicationbase.sql')
                    cursor2 = conn2.cursor()        

                    cursor2.execute("SELECT whoTakeId FROM orders WHERE id = ('%s')" % (user_id_mess))
                    current_values = cursor2.fetchone()

                    if current_values is not None:
                        current_phone_numbers = current_values[0] if current_values[0] else ""
                        print(type(current_phone_numbers))
                        new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo

                        cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))

                    conn2.commit()
                    cursor2.close()
                    conn2.close()



                    conn = sqlite3.connect('applicationbase.sql')
                    cursor = conn.cursor()

                    cursor.execute("SELECT numberPhoneFriends, FIOFriends FROM orders WHERE orderMessageId = ('%s')" % (test))
                    current_values = cursor.fetchone()

                    current_phone_numbers = current_values[0] if current_values[0] else ""
                    current_fio = current_values[1] if current_values[1] else ""
                    
                    new_phone_numbers = current_phone_numbers + "," + phoneNumberFirstFriend if current_phone_numbers else phoneNumberFirstFriend
                    new_fio = current_fio + "," + fioFirstFriend if current_fio else fioFirstFriend
                    

                    cursor.execute("UPDATE orders SET numberPhoneFriends = '%s', FIOFriends = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, new_fio, test))

                    conn.commit()
                    cursor.close()
                    conn.close()

                    conn4 = sqlite3.connect('peoplebase.sql')
                    cursor4 = conn4.cursor()
                    cursor4.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor4.fetchone()

                    if takeOrderTake is not None:
                        famname = takeOrderTake[4]
                        actualName = takeOrderTake[5]
                        otchName = takeOrderTake[6]
                        userPhone = takeOrderTake[2]

                    
                    cursor4.close()
                    conn4.close()
                    bot.send_message(message.chat.id, f'–í—ã {famname} {actualName} {otchName} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {userPhone} –µ–¥–µ—Ç–µ —Å –¥—Ä—É–≥–æ–º: {fioFirstFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberFirstFriend}', parse_mode='html')
                    

                    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberFirstFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioFirstFriend)

               
                
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞ –±–µ–∑ "+" –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ —Å 8:', parse_mode='html')
                input_first_friend_number(message)

def input_fio_second_friend(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§–ò–û –≤—Ç–æ—Ä–æ–≥–æ –¥—Ä—É–≥–∞', parse_mode='html')
    bot.register_next_step_handler(message, fio_second_friend_check)

def fio_second_friend_check(message):
    global fioSecondFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_fio_second_friend(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_fio_second_friend(message) 
        else:
            fioSecondFriend = message.text.strip()
            print(fioSecondFriend)
            input_second_friend_number(message)

def input_second_friend_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ –¥—Ä—É–≥–∞:', parse_mode='html')
    bot.register_next_step_handler(message, second_friend_number_check)

def second_friend_number_check(message):       
    global phoneNumberSecondFriend
    global checkFourthFriend

    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_second_friend_number(message)
    else:
        if len(message.text.strip()) != 11:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            message.text.strip(None)
            input_second_friend_number(message)        
        else:               
            if message.text.isdigit():
                phoneNumberSecondFriend = message.text.strip()    
                if checkFourthFriend is True:      
                    checkFourthFriend = False
                    input_fio_third_friend(message)              
                    print(checkFourthFriend)
                else:
                    conn = sqlite3.connect('peoplebase.sql')
                    cursor = conn.cursor()
                    cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor.fetchone()

                    if takeOrderTake is not None:
                        current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""

                        new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                        cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))

                    conn.commit()
                    cursor.close()
                    conn.close()

                    conn2 = sqlite3.connect('applicationbase.sql')
                    cursor2 = conn2.cursor()        


                    cursor2.execute("SELECT whoTakeId FROM orders WHERE orderMessageId = ('%s')" % (test))
                    current_values = cursor2.fetchone()

                    if current_values is not None:
                        current_phone_numbers = current_values[0] if current_values[0] else ""
                        print(type(current_phone_numbers))
                        new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo
                        

                        cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))

                    conn2.commit()
                    cursor2.close()
                    conn2.close()


                    conn = sqlite3.connect('applicationbase.sql')
                    cursor = conn.cursor()
                    

                    cursor.execute("SELECT numberPhoneFriends, FIOFriends FROM orders WHERE orderMessageId = ('%s')" % (test))
                    current_values = cursor.fetchone()

                    current_phone_numbers = current_values[0] if current_values[0] else ""
                    current_fio = current_values[1] if current_values[1] else ""
                    new_phone_numbers = current_phone_numbers + "," + phoneNumberFirstFriend + "," + phoneNumberSecondFriend if current_phone_numbers else phoneNumberFirstFriend + "," + phoneNumberSecondFriend
                    new_fio = current_fio + "," + fioFirstFriend + "," + fioSecondFriend if current_fio else fioFirstFriend + "," + fioSecondFriend

                    

                    cursor.execute("UPDATE orders SET numberPhoneFriends = '%s', FIOFriends = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, new_fio, test))

                    conn.commit()
                    cursor.close()
                    conn.close()

                    conn4 = sqlite3.connect('peoplebase.sql')
                    cursor4 = conn4.cursor()
                    cursor4.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor4.fetchone()

                    if takeOrderTake is not None:
                        famname = takeOrderTake[4]
                        actualName = takeOrderTake[5]
                        otchName = takeOrderTake[6]
                        userPhone = takeOrderTake[2]

                    
                    cursor4.close()
                    conn4.close()
                    

                    bot.send_message(message.chat.id, f'–í—ã {famname} {actualName} {otchName} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {userPhone}.\n–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n1. {fioFirstFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberFirstFriend}\n2. {fioSecondFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberSecondFriend}', parse_mode='html')


                    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberSecondFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioSecondFriend)

                
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞ –±–µ–∑ "+" –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ —Å 8:', parse_mode='html')
                input_second_friend_number(message)

def input_fio_third_friend(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§–ò–û —Ç—Ä–µ—Ç—å–µ–≥–æ –¥—Ä—É–≥–∞', parse_mode='html')
    bot.register_next_step_handler(message, fio_third_friend_check)

def fio_third_friend_check(message):
    global fioThirdFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_fio_third_friend(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_fio_third_friend(message) 
        else:
            fioThirdFriend = message.text.strip()
            print(fioThirdFriend)
            input_third_friend_number(message)

def input_third_friend_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –¥—Ä—É–≥–∞:', parse_mode='html')
    bot.register_next_step_handler(message, third_friend_number_check)

def third_friend_number_check(message):   
    global phoneNumberThirdFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_third_friend_number(message)
    else:
        if len(message.text.strip()) != 11:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            message.text.strip(None)
            input_third_friend_number(message)        
        else:               
            if message.text.isdigit():
                phoneNumberThirdFriend = message.text.strip()    

                conn = sqlite3.connect('peoplebase.sql')
                cursor = conn.cursor()
                cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
                takeOrderTake = cursor.fetchone()

                if takeOrderTake is not None:
                    current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""

                    new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                    cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))

                conn.commit()
                cursor.close()
                conn.close()


                conn2 = sqlite3.connect('applicationbase.sql')
                cursor2 = conn2.cursor()        

                cursor2.execute("SELECT whoTakeId FROM orders WHERE orderMessageId = ('%s')" % (test))
                current_values = cursor2.fetchone()
                print(user_id_mess)
                if current_values is not None:
                    current_phone_numbers = current_values[0] if current_values[0] else ""
                    print(type(current_phone_numbers))
                    new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo

                    cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))

                conn2.commit()
                cursor2.close()
                conn2.close()



                conn = sqlite3.connect('applicationbase.sql')
                cursor = conn.cursor()

                cursor.execute("SELECT numberPhoneFriends, FIOFriends FROM orders WHERE orderMessageId = ('%s')" % (test))
                current_values = cursor.fetchone()

                current_phone_numbers = current_values[0] if current_values[0] else ""
                current_fio = current_values[1] if current_values[1] else ""



                
                new_phone_numbers = current_phone_numbers + "," + phoneNumberFirstFriend + "," + phoneNumberSecondFriend + "," + phoneNumberThirdFriend if current_phone_numbers else phoneNumberFirstFriend + "," + phoneNumberSecondFriend + "," + phoneNumberThirdFriend
                new_fio = current_fio + "," + fioFirstFriend + "," + fioSecondFriend + "," + fioThirdFriend if current_fio else fioFirstFriend + "," + fioSecondFriend + "," + fioThirdFriend

                

                cursor.execute("UPDATE orders SET numberPhoneFriends = '%s', FIOFriends = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, new_fio, test))

                conn.commit()
                cursor.close()
                conn.close()

                conn4 = sqlite3.connect('peoplebase.sql')
                cursor4 = conn4.cursor()
                cursor4.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
                takeOrderTake = cursor4.fetchone()

                if takeOrderTake is not None:
                    famname = takeOrderTake[4]
                    actualName = takeOrderTake[5]
                    otchName = takeOrderTake[6]
                    userPhone = takeOrderTake[2]

                    
                cursor4.close()
                conn4.close()
                
                bot.send_message(message.chat.id, f'–í—ã {famname} {actualName} {otchName} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {userPhone}.\n–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n1.{fioFirstFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberFirstFriend}\n2. {fioSecondFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberSecondFriend}\n 3. {fioThirdFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberThirdFriend}', parse_mode='html')

                

                print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberFirstFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioFirstFriend)
                print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberSecondFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioSecondFriend)
                print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberThirdFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioThirdFriend)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞ –±–µ–∑ "+" –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ —Å 8:', parse_mode='html')
                input_third_friend_number(message)







if __name__ == '__main__':
    print('Bot started')
    bot.polling(non_stop=True)
