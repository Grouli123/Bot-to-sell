import telebot
from telebot import types
import sqlite3
from geopy.geocoders import Nominatim
from datetime import datetime, timedelta
import time
import re
from SendCloseMessage import SendCloseMessage
import  get_orders_config.get_orders_API_key as API_key
import  get_orders_config.get_orders_config_message as config_message
from apscheduler.schedulers.background import BackgroundScheduler

botApiKey = API_key.botAPISan

bot = telebot.TeleBot(botApiKey)

bot1 = telebot.TeleBot('6489313384:AAFOdsE5ZTo1pdXL_JNl1lxF_QMRfZ9pE9A')

scheduler = BackgroundScheduler()
scheduler.start()

maxSymbol = config_message.max_symbol_for_message

phoneButtonText = config_message.phone_button_text
phoneMessageText = config_message.message_to_send_phonenumber
phoneError = config_message.phone_error

geolocationButtonText = config_message.geolocation_button_text
geolocationMessageText = config_message.message_to_send_geolocation
geolocationNameApp = config_message.geolocator_name_app
foundedCity = config_message.founded_city
geolocationError = config_message.geolocation_error

lastnameText = config_message.input_lastname_text
lastnameError = config_message.lastname_error

firstnameText = config_message.input_firstname_text
firstnameError = config_message.firstname_error

middlenameText = config_message.input_middlename_text
middlenameError = config_message.middlename_error

dataOfBirthday = config_message.input_bitrhday_data_text
dateType = config_message.date_type
dateError = config_message.date_error

textOnly = config_message.message_should_be_text_type

citizenRuButtonYesText = config_message.citizen_ru_button_yes
citizenRuButtonYesTextCallbackData = config_message.citizen_ru_button_yes_callback_data

citizenRuButtonNoText = config_message.citizen_ru_button_no
citizenRuButtonNoTextCallbackData = config_message.citizen_ru_button_no_callback_data

userCitizenRuText = config_message.user_citizen_ru_text
userCitizenRuError = config_message.user_citizen_ru_error

registrationSucsess = config_message.registration_sucsess
buttonResultName = config_message.button_result_name

alreadyRegistered = config_message.already_registered

geolocator = None

nuberPhone = None
city = None
lastname = None
firstname = None
middlename = None
dataOfBirth = None       
citizenRF = None
user_id = None

cityTrue = 'False'

check_user_id = None

nalogacc = None
agreeaccaunt = None
passport = None

id_nubmer_list = None

last_sent_message = None
last_message_id = None  

humanCount = None
needText = None

editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'

error_reported = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞

check_mess_already_send = False

user_last_message_ids = {}

user_message_ids = {}

user_chat_ids = {}

isOpenEdit = False

data_called = False  

samozanYorN = None

orderTake = None
orderDone = None
orderMiss = None

user_id_mess = None
orderTakeTwo = ''

fioFirstFriend = None
fioSecondFriend = None
fioThirdFriend = None

phoneNumberFirstFriend = None
phoneNumberSecondFriend = None
phoneNumberThirdFriend = None

checkThirdFriend = False
checkFourthFriend = False

messageChatId = None

global_user_id = None

test = None

users_who_clicked = []

takeParam2 = None
cardNumber = None

@bot.message_handler(commands=['start'])
def registration(message):
    global check_mess_already_send
    global user_id
    global check_user_id
    global last_sent_message
    global humanCount
    global needText
    global last_message_id
    global error_reported
    global user_last_message_ids
    global user_message_ids
    global user_chat_ids
    global data_called
    global messageChatId

    data_called = False
    messageChatId = message.chat.id
    print(messageChatId)
    user_id = message.from_user.id
    print(user_id)

    try:
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    try:
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        takeParam = cursor.fetchone()
        if takeParam:
            check_user_id = takeParam[9]
        else:
            check_user_id = None

        cursor.execute("UPDATE users SET botChatId = ? WHERE user_id = ?", (messageChatId, user_id))
        conn.commit()
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.')
        check_user_id = None
    finally:
        cursor.close()
        conn.close()

    if check_user_id:
        bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úÖ\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!\n–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π.\n\n‚ÑπÔ∏è–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç). –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ" –Ω–∞ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"üëáüëáüëá', parse_mode='html')
        userCitizenRuText = f'üëâ–ü–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.send_message(message.chat.id, userCitizenRuText, reply_markup=markup)  
    else:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)          
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥—è –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)

def testMethod():
    global check_mess_already_send
    global check_user_id
    global last_sent_message
    global humanCount
    global needText
    global last_message_id
    global error_reported
    global user_last_message_ids
    global user_message_ids
    global user_chat_ids
    global data_called
    global user_id_mess

    data_called = False
    conn5 = sqlite3.connect('peoplebase.sql')
    cur5 = conn5.cursor()
    cur5.execute("SELECT botChatId FROM users")
    results = cur5.fetchall()
    conn = sqlite3.connect('applicationbase.sql')
    cur = conn.cursor()
    
    try:
        cur.execute("SELECT * FROM orders ORDER BY id DESC LIMIT 1")
        users = cur.fetchone() 
        if users is not None and "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" in users[2]:
            if (int(users[3]) <= 1) or (int(users[3]) >= 5):
                humanCount = '—á–µ–ª–æ–≤–µ–∫'
            else:
                humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
            if int(users[3]) > 1:
                needText = '–ù—É–∂–Ω–æ'
            else:
                needText = '–ù—É–∂–µ–Ω'
            if (int(users[3]) <= 1):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn52)            
            elif (int(users[3]) == 2):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn22)  
                markup2.row(btn52) 
            elif (int(users[3]) == 3):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                btn32 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 3', callback_data='–ï–¥–µ–º –≤ 3', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn22)  
                markup2.row(btn32)  
                markup2.row(btn52) 
            elif (int(users[3]) >= 4):
                markup2 = types.InlineKeyboardMarkup()
                btn12 = types.InlineKeyboardButton('–ï–¥—É 1', callback_data='–ï–¥—É 1', one_time_keyboard=True)
                btn22 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 2', callback_data='–ï–¥–µ–º –≤ 2', one_time_keyboard=True)
                btn32 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 3', callback_data='–ï–¥–µ–º –≤ 3', one_time_keyboard=True)
                btn42 = types.InlineKeyboardButton('–ï–¥–µ–º –≤ 4', callback_data='–ï–¥–µ–º –≤ 4', one_time_keyboard=True)
                btn52 = types.InlineKeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url='https://t.me/Grouli123', one_time_keyboard=True)
                markup2.row(btn12)  
                markup2.row(btn22)  
                markup2.row(btn32)  
                markup2.row(btn42)  
                markup2.row(btn52)            
            order_info = f'‚úÖ\n<b>‚Ä¢{users[2]}: </b>{needText} {users[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {users[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {users[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {users[6]}:00\n<b>¬∑–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {users[17]}:00\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{users[8]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'
            if order_info != last_sent_message:                    
                user_id_mess = users[0]
                cur.execute("SELECT orderMessageId FROM orders WHERE id = ('%s')" % (user_id_mess))
                current_message_ids_str = cur.fetchone()[0]
                current_message_ids = current_message_ids_str.split(',') if current_message_ids_str else []
                for result in results:
                    botChatIdw = result[0]  
                    if botChatIdw != 'None':
                        sent_message = bot.send_message(botChatIdw, order_info, reply_markup=markup2, parse_mode='html')
                        last_message_id = sent_message.message_id  
                        user_chat_id_str = user_chat_ids.get(user_id_mess, "")
                        if user_chat_id_str:
                            user_chat_id_str += ","
                        user_chat_id_str += str(botChatIdw)
                        user_chat_ids[user_id_mess] = user_chat_id_str
                        user_message_id_list = user_message_ids.get(user_id_mess, [])
                        user_message_id_list.append(last_message_id)
                        user_message_ids[user_id_mess] = user_message_id_list
                        last_message_id_str = str(last_message_id)
                        current_message_ids.append(last_message_id_str)                            
                        updated_message_ids_str = ','.join(current_message_ids)
                cur5.close()
                conn5.close()           
                for user_id_mess, message_id_list in user_message_ids.items():
                    updated_message_ids_str = ','.join(map(str, message_id_list))
                    sql_query = "UPDATE orders SET orderMessageId = ('%s'), orderChatId = ('%s') WHERE id = ('%s')"
                    cur.execute(sql_query % (updated_message_ids_str, user_chat_id_str, user_id_mess))
                conn.commit()
                last_sent_message = order_info
                check_mess_already_send = False
            else:
                print('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
                print(user_last_message_ids)
        else:                
            print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')       
        cur.close()
        conn.close()
        time.sleep(3)
    except sqlite3.Error as e:
        if not error_reported:
            print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')
            error_reported = True  
        conn.close()


def sendNotyfiMessage():
    global check_mess_already_send
    global check_user_id
    global last_sent_message
    global humanCount
    global needText
    global last_message_id
    global error_reported
    global user_last_message_ids
    global user_message_ids
    global user_chat_ids
    global data_called
    global user_id_mess
    data_called = False
    conn5 = sqlite3.connect('peoplebase.sql')
    cur5 = conn5.cursor()
    cur5.execute("SELECT botChatId FROM users")
    results = cur5.fetchall()
    conn = sqlite3.connect('applicationbase.sql')
    cur = conn.cursor()
    try:
        cur.execute("SELECT * FROM orders ORDER BY id DESC LIMIT 1")
        users = cur.fetchone()         
        if users is not None:                       
            order_info = f'{users[18]}'               
            if order_info != last_sent_message:
                print('—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–ª—Å–µ')
                user_id_mess = users[0]
                print(user_id_mess)
                cur.execute("SELECT orderMessageId FROM orders WHERE id = ('%s')" % (user_id_mess))
                current_message_ids_str = cur.fetchone()[0]
                current_message_ids = current_message_ids_str.split(',') if current_message_ids_str else []
                for result in results:
                    botChatIdw = result[0]  
                    if botChatIdw != 'None':
                        print("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ botChatId:", botChatIdw)
                        sent_message = bot.send_message(botChatIdw, order_info, parse_mode='html')
                        last_message_id = sent_message.message_id  
                        user_chat_id_str = user_chat_ids.get(user_id_mess, "")
                        if user_chat_id_str:
                            user_chat_id_str += ","
                        user_chat_id_str += str(botChatIdw)
                        user_chat_ids[user_id_mess] = user_chat_id_str
                        user_message_id_list = user_message_ids.get(user_id_mess, [])
                        user_message_id_list.append(last_message_id)
                        user_message_ids[user_id_mess] = user_message_id_list
                        last_message_id_str = str(last_message_id)
                        current_message_ids.append(last_message_id_str)                            
                        updated_message_ids_str = ','.join(current_message_ids)
                cur5.close()
                conn5.close()                   
                for user_id_mess, message_id_list in user_message_ids.items():
                    updated_message_ids_str = ','.join(map(str, message_id_list))
                    sql_query = "UPDATE orders SET orderMessageId = ('%s'), orderChatId = ('%s') WHERE id = ('%s')"
                    cur.execute(sql_query % (updated_message_ids_str, user_chat_id_str, user_id_mess))
                conn.commit()
                last_sent_message = order_info
                check_mess_already_send = False 
            else:
                print('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
                print(user_last_message_ids)
        else:                
            print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')
        cur.close()
        conn.close()
        time.sleep(3)
    except sqlite3.Error as e:
        if not error_reported:
                
            print('–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç')
            error_reported = True 
        conn.close()

def update_message_with_users_list(chat_id, message_id, test, user_id, users_who_clicked):
    conn3 = sqlite3.connect('applicationbase.sql')
    cur3 = conn3.cursor()
    cur3.execute("SELECT orderMessageId, adminChatId, adminMessageId FROM orders")
    rows = cur3.fetchall() 
    for row in rows:
        order_message_ids = row[0].split(',')
        admin_chat_id = row[1]
        admin_message_id = row[2]
    if str(test) in order_message_ids:
        try:
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å', callback_data='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–ê–¥–º–∏–Ω—É')
            btn01 = types.InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É', callback_data='‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É', one_time_keyboard=True)
            print(print(f"–ó–Ω–∞—á–µ–Ω–∏–µ user_{user_id}"))
            markup.row(btn)
            markup.row(btn01)
            bot1.edit_message_reply_markup(chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=markup)
        except Exception:
            print('–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å')
    
@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥—É 1')
def callback_data_of_data(callback): 
    global orderTakeTwo
    global checkThirdFriend
    global checkFourthFriend
    global user_id_mess
    global user_id_name
    global test
    global user_id
    global takeParam2
    if callback.data == '–ï–¥—É 1':
        test = callback.message.message_id
        user_id = callback.from_user.id
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT actualOrder FROM users WHERE user_id = ?", (user_id,))
        actual_order = cursor.fetchone()

        if actual_order and actual_order[0] not in [None, ""]:
            bot.send_message(callback.message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–∫–∞–∑")
            conn.close()
            return
        cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
        takeParam2 = cursor.fetchone() 
        print('—é–∑–µ—Ä –∞–π–¥–∏ ',user_id)
        if takeParam2:
            orderTakeTwo = takeParam2[0]
            conn4 = sqlite3.connect('applicationbase.sql')
            cur4 = conn4.cursor()
            cur4.execute("SELECT orderMessageId, id FROM orders")
            rows = cur4.fetchall()
            for row in rows:
                order_message_ids2 = row[0].split(',')
                order_id2 = row[1]
                print('–æ—Ä–¥–µ—Ä –∞–π–¥–∏ ', order_id2)
            print(orderTakeTwo)
            print('—Ä–∞–±–æ—Ç–∞–µ—Ç')
            cur4.close()
            conn4.close()
        else:
            print('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        print('—Ç–µ—Å—Ç ', user_id)
        users_who_clicked.append(user_id)
        update_message_with_users_list(callback.message.chat.id, callback.message.message_id, test, user_id, users_who_clicked)
        cursor.execute("SELECT orderTake, actualOrder FROM users WHERE user_id = ('%s')" % (user_id))
        takeOrderTake = cursor.fetchone()
        if str(test) in order_message_ids2:
            if takeOrderTake is not None:
                current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""
                conn3 = sqlite3.connect('applicationbase.sql')
                cur3 = conn3.cursor()
                cur3.execute("SELECT * FROM orders WHERE id = ('%s')" % (order_id2))
                users = cur3.fetchone() 
                print(callback.message.message_id)
                user_id_mess = users[0]
                print('—é–∑–µ—Ä –∞–π–¥–∏ –º–µ—Å—Å—Å—Å',type(user_id_mess))
                cur3.close()
                conn3.close()
                new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                cursor.execute("UPDATE users SET orderTake = '%s', actualOrder = '%s' WHERE user_id = '%s'" % (new_orderId, str(user_id_mess), user_id))
                conn.commit()  
                cursor.close()
                conn.close()      
            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()        
            cursor2.execute("SELECT whoTakeId FROM orders WHERE id = ('%s')" % (order_id2))
            current_values = cursor2.fetchone()
            print('–∫–∞—Ä–µ–Ω—Ç –ø—Ö–æ–Ω ', current_values)
            if current_values is not None:
                current_phone_numbers = current_values[0] if current_values[0] else ""
                print(type(current_phone_numbers))
                print('nen ', current_phone_numbers)
                print('–¢—É—Ç ', orderTakeTwo)
                new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo
                print('–Ω–µ—é –ø—Ö–æ–Ω–µ', new_phone_numbers)
                cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE id = '%s'" % (new_phone_numbers, order_id2))
                print(cursor2)
                conn2.commit()
            else:  
                print('—Ç—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            cursor2.close()
            conn2.close()
            conn2 = sqlite3.connect('applicationbase.sql')
            cursor2 = conn2.cursor()     
            cursor2.execute("SELECT * FROM orders WHERE id = ('%s')" % (order_id2))
            table_element = cursor2.fetchone()
            if table_element is not None:
                if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                    humanCount = '—á–µ–ª–æ–≤–µ–∫'
                else:
                    humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
                if int(table_element[3]) > 1:
                    needText = '–ù—É–∂–Ω–æ'
                else:
                    needText = '–ù—É–∂–µ–Ω'
            order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}:00\n<b>‚Ä¢–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</b> {table_element[17]}:00\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[8]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'
            bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')
            bot.send_message(callback.message.chat.id, f'–ü—Ä–∏–Ω—è—Ç–æ, –≤—ã –µ–¥–µ—Ç–µ 1, –≤–∞—à –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: {user_id_mess}\n –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: {orderTakeTwo}') 
            conn2.commit()
            cursor2.close()
            conn2.close()
        job_time = datetime.strptime(table_element[6], "%H") - timedelta(minutes=20)
        job_time = job_time.replace(year=datetime.now().year, month=datetime.now().month, day=datetime.now().day)
        if job_time < datetime.now():
            job_time = job_time + timedelta(days=1)
        scheduler.add_job(send_reminder, 'date', run_date=job_time, args=[callback.message.chat.id, user_id_mess])

def send_reminder(chat_id, user_id_mess):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes_{user_id_mess}'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'close_order_{user_id_mess}'))
    bot.send_message(chat_id, f'–í—ã –≤—ã–µ—Ö–∞–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('yes_') or call.data.startswith('close_order_'))
def handle_reminder_response(call):
    user_id_mess = call.data.split('_')[1]
    if call.data.startswith('yes_'):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –≤—ã–µ—Ö–∞–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?')
        send_reminder_two(call.message.chat.id, user_id_mess)
    elif call.data.startswith('close_order_'):
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET actualOrder = '' WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        cursor.close()
        conn.close()
        conn = sqlite3.connect('applicationbase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT whoTakeId FROM orders WHERE orderChatId LIKE ?", (f"%{call.message.chat.id}%",))
        result = cursor.fetchone()
        if result:
            who_take_id = result[0]
            updated_who_take_id = ','.join([id for id in who_take_id.split(',') if id != user_id_mess])
            cursor.execute("UPDATE orders SET whoTakeId = ? WHERE orderChatId LIKE ?", (updated_who_take_id, f"%{call.message.chat.id}%"))
            conn.commit()
        cursor.close()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –≤—ã–µ—Ö–∞–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?')
        bot.send_message(call.message.chat.id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')

def send_reminder_two(chat_id, user_id_mess):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes2_{user_id_mess}'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'close_order2_{user_id_mess}'))
    bot.send_message(chat_id, f'–í—ã –≤ –ø—É—Ç–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('yes2_') or call.data.startswith('close_order2_'))
def handle_reminder_response_two(call):
    user_id_mess = call.data.split('_')[1]
    if call.data.startswith('yes2_'):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –≤ –ø—É—Ç–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?')
        send_reminder_three(call.message.chat.id, user_id_mess)
    elif call.data.startswith('close_order2_'):
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET actualOrder = '' WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        cursor.close()
        conn.close()
        conn = sqlite3.connect('applicationbase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT whoTakeId FROM orders WHERE orderChatId LIKE ?", (f"%{call.message.chat.id}%",))
        result = cursor.fetchone()
        if result:
            who_take_id = result[0]
            updated_who_take_id = ','.join([id for id in who_take_id.split(',') if id != user_id_mess])
            cursor.execute("UPDATE orders SET whoTakeId = ? WHERE orderChatId LIKE ?", (updated_who_take_id, f"%{call.message.chat.id}%"))
            conn.commit()
        cursor.close()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –≤ –ø—É—Ç–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?')
        bot.send_message(call.message.chat.id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')

def send_reminder_three(chat_id, user_id_mess):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes3_{user_id_mess}'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'close_order3_{user_id_mess}'))
    bot.send_message(chat_id, f'–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('yes3_') or call.data.startswith('close_order3_'))
def handle_reminder_response_three(call):
    user_id_mess = call.data.split('_')[1]
    if call.data.startswith('yes3_'):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?')
        send_reminder_four(call.message.chat.id, user_id_mess)
    elif call.data.startswith('close_order3_'):
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET actualOrder = '' WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        cursor.close()
        conn.close()
        conn = sqlite3.connect('applicationbase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT whoTakeId FROM orders WHERE orderChatId LIKE ?", (f"%{call.message.chat.id}%",))
        result = cursor.fetchone()
        if result:
            who_take_id = result[0]
            updated_who_take_id = ','.join([id for id in who_take_id.split(',') if id != user_id_mess])
            cursor.execute("UPDATE orders SET whoTakeId = ? WHERE orderChatId LIKE ?", (updated_who_take_id, f"%{call.message.chat.id}%"))
            conn.commit()
        cursor.close()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑ {user_id_mess}?')
        bot.send_message(call.message.chat.id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')

def send_reminder_four(chat_id, user_id_mess):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes4_{user_id_mess}'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'close_order4_{user_id_mess}'))
    bot.send_message(chat_id, f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ {user_id_mess}?', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('yes4_') or call.data.startswith('close_order4_'))
def handle_reminder_response_four(call):
    user_id_mess = call.data.split('_')[1]
    if call.data.startswith('yes4_'):
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT actualOrder FROM users WHERE user_id = ?", (call.from_user.id,))
        actual_order = cursor.fetchone()
        if actual_order and actual_order[0] not in [None, ""]:
            cursor.execute("UPDATE users SET orderDone = ?, actualOrder = '' WHERE user_id = ?", (actual_order[0], call.from_user.id))
            conn.commit()
            bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ –∑–∞–∫–∞–∑–µ.')
        else:
            bot.send_message(call.message.chat.id, '–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.')
        cursor.close()
        conn.close()
        conn = sqlite3.connect('applicationbase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT whoTakeId FROM orders WHERE orderChatId LIKE ?", (f"%{call.message.chat.id}%",))
        result = cursor.fetchone()
        if result:
            who_take_id = result[0]
            updated_who_take_id = ','.join([id for id in who_take_id.split(',') if id != user_id_mess])
            cursor.execute("UPDATE orders SET whoTakeId = ? WHERE orderChatId LIKE ?", (updated_who_take_id, f"%{call.message.chat.id}%"))
            conn.commit()
        cursor.close()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ {user_id_mess}?')
        send_reminder_five(call.message)
    elif call.data.startswith('close_order4_'):
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET actualOrder = '' WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        cursor.close()
        conn.close()
        conn = sqlite3.connect('applicationbase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT whoTakeId FROM orders WHERE orderChatId LIKE ?", (f"%{call.message.chat.id}%",))
        result = cursor.fetchone()
        if result:
            who_take_id = result[0]
            updated_who_take_id = ','.join([id for id in who_take_id.split(',') if id != user_id_mess])
            cursor.execute("UPDATE orders SET whoTakeId = ? WHERE orderChatId LIKE ?", (updated_who_take_id, f"%{call.message.chat.id}%"))
            conn.commit()
        cursor.close()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ {user_id_mess}?')
        bot.send_message(call.message.chat.id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')

def send_reminder_five(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –∑–∞–∫–∞–∑ ', parse_mode='html')
    bot.register_next_step_handler(message, send_money_message_admin)

def send_money_message_admin(message):
    global cardNumber
    test = message.chat.id
    if message.text is None:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        if len(message.text.strip()) > 20:  
            bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é.")
        else:
            cardNumber = message.text.strip()
            conn = sqlite3.connect('peoplebase.sql')
            cursor = conn.cursor()
            cursor.execute("SELECT actualOrder FROM users WHERE user_id = ?", (message.from_user.id,))
            actual_order = cursor.fetchone()
            cursor.execute("UPDATE users SET orderDone = ?, actualOrder = '' WHERE user_id = ?", (actual_order[0], message.from_user.id))
            conn.commit()
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ –∑–∞–∫–∞–∑–µ.')
            cursor.close()
            conn.close()
            conn = sqlite3.connect('applicationbase.sql')
            cursor = conn.cursor()
            cursor.execute("SELECT adminChatId FROM orders WHERE orderChatId LIKE ?", (f"%{test}%",))
            actual_order_admin = cursor.fetchone()
            print(actual_order_admin, ' actual order admin')
            print(actual_order_admin[0], ' actual order admin0')
            if actual_order_admin:
                SendCloseMessage(int(actual_order_admin[0]), cardNumber, message.from_user.id)
            cursor.close()
            conn.close()
            print(cardNumber, ' card')

@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥–µ–º –≤ 2') 
def callback_data_of_data_two(callback):     
    global orderTakeTwo
    global checkThirdFriend
    global checkFourthFriend
    global user_id_mess
    global user_id_name
    global test
    global user_id
    global takeParam2
    if callback.data == '–ï–¥–µ–º –≤ 2':
        test = callback.message.message_id
        user_id = callback.from_user.id
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT actualOrder FROM users WHERE user_id = ?", (user_id,))
        actual_order = cursor.fetchone()
        if actual_order and actual_order[0] not in [None, ""]:
            bot.send_message(callback.message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–∫–∞–∑")
            conn.close()
            return
        cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
        takeParam2 = cursor.fetchone() 
        print('—é–∑–µ—Ä –∞–π–¥–∏ ',user_id)
        if takeParam2:
            orderTakeTwo = takeParam2[0]
            conn4 = sqlite3.connect('applicationbase.sql')
            cur4 = conn4.cursor()
            cur4.execute("SELECT orderMessageId, id FROM orders")
            rows = cur4.fetchall()
            for row in rows:
                order_message_ids2 = row[0].split(',')
                order_id2 = row[1]
                print('–æ—Ä–¥–µ—Ä –∞–π–¥–∏ ', order_id2)
            print(orderTakeTwo)
            print('—Ä–∞–±–æ—Ç–∞–µ—Ç')
            cur4.close()
            conn4.close()
        else:
            print('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        conn3 = sqlite3.connect('applicationbase.sql')
        cur3 = conn3.cursor()
        cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
        users = cur3.fetchone() 
        user_id_mess = users[0]
        cur3.close()
        conn3.close()
        conn2 = sqlite3.connect('applicationbase.sql')
        cursor2 = conn2.cursor()        
        cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
        table_element = cursor2.fetchone()
        if table_element is not None:
            if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                humanCount = '—á–µ–ª–æ–≤–µ–∫'
            else:
                humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
            if int(table_element[3]) > 1:
                needText = '–ù—É–∂–Ω–æ'
            else:
                needText = '–ù—É–∂–µ–Ω'
        order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}:00\n<b>‚Ä¢–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</b> {table_element[17]}:00\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[8]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'
        bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')
        conn2.commit()
        cursor2.close()
        conn2.close()
        input_fio_first_friend(callback.message)

@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥–µ–º –≤ 3') 
def callback_data_of_data_three(callback):     
    global orderTakeTwo
    global checkThirdFriend
    global checkFourthFriend
    global user_id_mess
    global user_id_name
    global test
    global user_id
    global takeParam2
    if callback.data == '–ï–¥–µ–º –≤ 3':
        test = callback.message.message_id
        user_id = callback.from_user.id
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT actualOrder FROM users WHERE user_id = ?", (user_id,))
        actual_order = cursor.fetchone()
        if actual_order and actual_order[0] not in [None, ""]:
            bot.send_message(callback.message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–∫–∞–∑")
            conn.close()
            return
        cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
        takeParam2 = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
        print('—é–∑–µ—Ä –∞–π–¥–∏ ',user_id)
        if takeParam2:
            orderTakeTwo = takeParam2[0]
            conn4 = sqlite3.connect('applicationbase.sql')
            cur4 = conn4.cursor()
            cur4.execute("SELECT orderMessageId, id FROM orders")
            rows = cur4.fetchall()
            for row in rows:
                order_message_ids2 = row[0].split(',')
                order_id2 = row[1]
                print('–æ—Ä–¥–µ—Ä –∞–π–¥–∏ ', order_id2)
            print(orderTakeTwo)
            print('—Ä–∞–±–æ—Ç–∞–µ—Ç')
            cur4.close()
            conn4.close()
        else:
            print('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        conn3 = sqlite3.connect('applicationbase.sql')
        cur3 = conn3.cursor()
        cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
        users = cur3.fetchone() 
        print(callback.message.message_id)
        user_id_mess = users[0]
        cur3.close()
        conn3.close()
        checkThirdFriend = True
        conn2 = sqlite3.connect('applicationbase.sql')
        cursor2 = conn2.cursor()        
        cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
        table_element = cursor2.fetchone()
        if table_element is not None:
            if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                humanCount = '—á–µ–ª–æ–≤–µ–∫'
            else:
                humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
            if int(table_element[3]) > 1:
                needText = '–ù—É–∂–Ω–æ'
            else:
                needText = '–ù—É–∂–µ–Ω'
        order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}:00\n<b>‚Ä¢–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</b> {table_element[17]}:00\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[8]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'
        bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')
        conn2.commit()
        cursor2.close()
        conn2.close()
        input_fio_first_friend(callback.message)

@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥–µ–º –≤ 4') 
def callback_data_of_data_four(callback): 
    global orderTakeTwo
    global checkThirdFriend
    global checkFourthFriend
    global user_id_mess
    global user_id_name
    global test
    global user_id
    global takeParam2
    if callback.data == '–ï–¥–µ–º –≤ 4': 
        test = callback.message.message_id
        user_id = callback.from_user.id
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT actualOrder FROM users WHERE user_id = ?", (user_id,))
        actual_order = cursor.fetchone()
        if actual_order and actual_order[0] not in [None, ""]:
            bot.send_message(callback.message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–∫–∞–∑")
            conn.close()
            return
        cursor.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
        takeParam2 = cursor.fetchone() # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
        print('—é–∑–µ—Ä –∞–π–¥–∏ ',user_id)
        if takeParam2:
            orderTakeTwo = takeParam2[0]
            conn4 = sqlite3.connect('applicationbase.sql')
            cur4 = conn4.cursor()
            cur4.execute("SELECT orderMessageId, id FROM orders")
            rows = cur4.fetchall()
            for row in rows:
                order_message_ids2 = row[0].split(',')
                order_id2 = row[1]
                print('–æ—Ä–¥–µ—Ä –∞–π–¥–∏ ', order_id2)
            print(orderTakeTwo)
            print('—Ä–∞–±–æ—Ç–∞–µ—Ç')
            cur4.close()
            conn4.close()
        else:
            print('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        conn3 = sqlite3.connect('applicationbase.sql')
        cur3 = conn3.cursor()
        cur3.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
        users = cur3.fetchone() 
        print(callback.message.message_id)            
        user_id_mess = users[0]
        cur3.close()
        conn3.close()
        checkThirdFriend = True
        checkFourthFriend = True       
        conn2 = sqlite3.connect('applicationbase.sql')
        cursor2 = conn2.cursor()        
        cursor2.execute("SELECT * FROM orders WHERE orderMessageId = ('%s')" % (test))
        table_element = cursor2.fetchone()
        if table_element is not None:
            if (int(table_element[3]) <= 1) or (int(table_element[3]) >= 5):
                humanCount = '—á–µ–ª–æ–≤–µ–∫'
            else:
                humanCount = '—á–µ–ª–æ–≤–µ–∫–∞'
            if int(table_element[3]) > 1:
                needText = '–ù—É–∂–Ω–æ'
            else:
                needText = '–ù—É–∂–µ–Ω'
        order_info = f'‚úÖ\n<b>‚Ä¢{table_element[2]}: </b>{needText} {table_element[3]} {humanCount}\n<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {table_element[4]}\n<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {table_element[5]}\n<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {table_element[6]}:00\n<b>‚Ä¢–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</b> {table_element[17]}:00\n<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{table_element[8]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>'
        bot.edit_message_text(order_info, callback.message.chat.id, callback.message.message_id, parse_mode='html')
        conn2.commit()
        cursor2.close()
        conn2.close()
        input_fio_first_friend(callback.message)

def input_fio_first_friend(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§–ò–û –¥—Ä—É–≥–∞', parse_mode='html')
    bot.register_next_step_handler(message, fio_first_friend_check)

def fio_first_friend_check(message):
    global fioFirstFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_fio_first_friend(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_fio_first_friend(message) 
        else:
            fioFirstFriend = message.text.strip()
            print(fioFirstFriend)
            input_first_friend_number(message)

def input_first_friend_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞:', parse_mode='html')
    bot.register_next_step_handler(message, first_friend_number_check)

def first_friend_number_check(message):       
    global phoneNumberFirstFriend
    global checkThirdFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_first_friend_number(message)
    else:
        if len(message.text.strip()) != 11:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            message.text.strip(None)
            input_first_friend_number(message)        
        else:               
            if message.text.isdigit():
                phoneNumberFirstFriend = message.text.strip()    
                if checkThirdFriend is True:          
                    checkThirdFriend = False
                    input_fio_second_friend(message)           
                    print(checkThirdFriend)
                else:  
                    users_who_clicked.append(user_id)
                    update_message_with_users_list(message.chat.id, message.message_id, test, user_id, users_who_clicked)
                    conn = sqlite3.connect('peoplebase.sql')
                    cursor = conn.cursor()
                    cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor.fetchone()
                    if takeOrderTake is not None:
                        current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""                        
                        new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                        cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))
                    conn.commit()
                    cursor.close()
                    conn.close()
                    conn2 = sqlite3.connect('applicationbase.sql')
                    cursor2 = conn2.cursor()        
                    cursor2.execute("SELECT whoTakeId FROM orders WHERE id = ('%s')" % (user_id_mess))
                    current_values = cursor2.fetchone()
                    if current_values is not None:
                        current_phone_numbers = current_values[0] if current_values[0] else ""
                        print(type(current_phone_numbers))
                        new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo
                        cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))
                    conn2.commit()
                    cursor2.close()
                    conn2.close()
                    conn = sqlite3.connect('applicationbase.sql')
                    cursor = conn.cursor()
                    cursor.execute("SELECT numberPhoneFriends, FIOFriends FROM orders WHERE orderMessageId = ('%s')" % (test))
                    current_values = cursor.fetchone()
                    current_phone_numbers = current_values[0] if current_values[0] else ""
                    current_fio = current_values[1] if current_values[1] else ""                    
                    new_phone_numbers = current_phone_numbers + "," + phoneNumberFirstFriend if current_phone_numbers else phoneNumberFirstFriend
                    new_fio = current_fio + "," + fioFirstFriend if current_fio else fioFirstFriend
                    cursor.execute("UPDATE orders SET numberPhoneFriends = '%s', FIOFriends = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, new_fio, test))
                    conn.commit()
                    cursor.close()
                    conn.close()
                    conn4 = sqlite3.connect('peoplebase.sql')
                    cursor4 = conn4.cursor()
                    cursor4.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor4.fetchone()
                    if takeOrderTake is not None:
                        famname = takeOrderTake[4]
                        actualName = takeOrderTake[5]
                        otchName = takeOrderTake[6]
                        userPhone = takeOrderTake[2]
                    cursor4.close()
                    conn4.close()
                    bot.send_message(message.chat.id, f'–í—ã {famname} {actualName} {otchName} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {userPhone} –µ–¥–µ—Ç–µ —Å –¥—Ä—É–≥–æ–º: {fioFirstFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberFirstFriend}', parse_mode='html')
                    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberFirstFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioFirstFriend)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞ –±–µ–∑ "+" –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ —Å 8:', parse_mode='html')
                input_first_friend_number(message)

def input_fio_second_friend(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§–ò–û –≤—Ç–æ—Ä–æ–≥–æ –¥—Ä—É–≥–∞', parse_mode='html')
    bot.register_next_step_handler(message, fio_second_friend_check)

def fio_second_friend_check(message):
    global fioSecondFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_fio_second_friend(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_fio_second_friend(message) 
        else:
            fioSecondFriend = message.text.strip()
            print(fioSecondFriend)
            input_second_friend_number(message)

def input_second_friend_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ –¥—Ä—É–≥–∞:', parse_mode='html')
    bot.register_next_step_handler(message, second_friend_number_check)

def second_friend_number_check(message):       
    global phoneNumberSecondFriend
    global checkFourthFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_second_friend_number(message)
    else:
        if len(message.text.strip()) != 11:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            message.text.strip(None)
            input_second_friend_number(message)        
        else:               
            if message.text.isdigit():
                phoneNumberSecondFriend = message.text.strip()    
                if checkFourthFriend is True:      
                    checkFourthFriend = False
                    input_fio_third_friend(message)              
                    print(checkFourthFriend)
                else:
                    users_who_clicked.append(user_id)
                    update_message_with_users_list(message.chat.id, message.message_id, test, user_id, users_who_clicked)
                    conn = sqlite3.connect('peoplebase.sql')
                    cursor = conn.cursor()
                    cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor.fetchone()
                    if takeOrderTake is not None:
                        current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""
                        new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                        cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))
                    conn.commit()
                    cursor.close()
                    conn.close()
                    conn2 = sqlite3.connect('applicationbase.sql')
                    cursor2 = conn2.cursor()        
                    cursor2.execute("SELECT whoTakeId FROM orders WHERE orderMessageId = ('%s')" % (test))
                    current_values = cursor2.fetchone()
                    if current_values is not None:
                        current_phone_numbers = current_values[0] if current_values[0] else ""
                        print(type(current_phone_numbers))
                        new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo
                        cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))
                    conn2.commit()
                    cursor2.close()
                    conn2.close()
                    conn = sqlite3.connect('applicationbase.sql')
                    cursor = conn.cursor()
                    cursor.execute("SELECT numberPhoneFriends, FIOFriends FROM orders WHERE orderMessageId = ('%s')" % (test))
                    current_values = cursor.fetchone()
                    current_phone_numbers = current_values[0] if current_values[0] else ""
                    current_fio = current_values[1] if current_values[1] else ""
                    new_phone_numbers = current_phone_numbers + "," + phoneNumberFirstFriend + "," + phoneNumberSecondFriend if current_phone_numbers else phoneNumberFirstFriend + "," + phoneNumberSecondFriend
                    new_fio = current_fio + "," + fioFirstFriend + "," + fioSecondFriend if current_fio else fioFirstFriend + "," + fioSecondFriend
                    cursor.execute("UPDATE orders SET numberPhoneFriends = '%s', FIOFriends = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, new_fio, test))
                    conn.commit()
                    cursor.close()
                    conn.close()
                    conn4 = sqlite3.connect('peoplebase.sql')
                    cursor4 = conn4.cursor()
                    cursor4.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
                    takeOrderTake = cursor4.fetchone()
                    if takeOrderTake is not None:
                        famname = takeOrderTake[4]
                        actualName = takeOrderTake[5]
                        otchName = takeOrderTake[6]
                        userPhone = takeOrderTake[2]
                    cursor4.close()
                    conn4.close()
                    bot.send_message(message.chat.id, f'–í—ã {famname} {actualName} {otchName} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {userPhone}.\n–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n1. {fioFirstFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberFirstFriend}\n2. {fioSecondFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberSecondFriend}', parse_mode='html')
                    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberSecondFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioSecondFriend)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞ –±–µ–∑ "+" –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ —Å 8:', parse_mode='html')
                input_second_friend_number(message)

def input_fio_third_friend(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –§–ò–û —Ç—Ä–µ—Ç—å–µ–≥–æ –¥—Ä—É–≥–∞', parse_mode='html')
    bot.register_next_step_handler(message, fio_third_friend_check)

def fio_third_friend_check(message):
    global fioThirdFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_fio_third_friend(message) 
    else:
        if len(message.text.strip()) > maxSymbol:
            bot.send_message(message.chat.id, lastnameError)
            message.text.strip(None)
            input_fio_third_friend(message) 
        else:
            fioThirdFriend = message.text.strip()
            print(fioThirdFriend)
            input_third_friend_number(message)

def input_third_friend_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –¥—Ä—É–≥–∞:', parse_mode='html')
    bot.register_next_step_handler(message, third_friend_number_check)

def third_friend_number_check(message):   
    global phoneNumberThirdFriend
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_third_friend_number(message)
    else:
        if len(message.text.strip()) != 11:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            message.text.strip(None)
            input_third_friend_number(message)        
        else:               
            if message.text.isdigit():
                phoneNumberThirdFriend = message.text.strip()    
                users_who_clicked.append(user_id)
                update_message_with_users_list(message.chat.id, message.message_id, test, user_id, users_who_clicked)
                conn = sqlite3.connect('peoplebase.sql')
                cursor = conn.cursor()
                cursor.execute("SELECT orderTake FROM users WHERE user_id = ('%s')" % (user_id))
                takeOrderTake = cursor.fetchone()
                if takeOrderTake is not None:
                    current_orderId = takeOrderTake[0] if takeOrderTake[0] else ""

                    new_orderId = current_orderId + "," + str(user_id_mess) if current_orderId else user_id_mess
                    cursor.execute("UPDATE users SET orderTake = '%s' WHERE user_id = '%s'" % (new_orderId, user_id))
                conn.commit()
                cursor.close()
                conn.close()
                conn2 = sqlite3.connect('applicationbase.sql')
                cursor2 = conn2.cursor()        
                cursor2.execute("SELECT whoTakeId FROM orders WHERE orderMessageId = ('%s')" % (test))
                current_values = cursor2.fetchone()
                print(user_id_mess)
                if current_values is not None:
                    current_phone_numbers = current_values[0] if current_values[0] else ""
                    print(type(current_phone_numbers))
                    new_phone_numbers = current_phone_numbers + "," + str(orderTakeTwo) if current_phone_numbers else orderTakeTwo
                    cursor2.execute("UPDATE orders SET whoTakeId = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, test))
                conn2.commit()
                cursor2.close()
                conn2.close()
                conn = sqlite3.connect('applicationbase.sql')
                cursor = conn.cursor()
                cursor.execute("SELECT numberPhoneFriends, FIOFriends FROM orders WHERE orderMessageId = ('%s')" % (test))
                current_values = cursor.fetchone()
                current_phone_numbers = current_values[0] if current_values[0] else ""
                current_fio = current_values[1] if current_values[1] else ""
                new_phone_numbers = current_phone_numbers + "," + phoneNumberFirstFriend + "," + phoneNumberSecondFriend + "," + phoneNumberThirdFriend if current_phone_numbers else phoneNumberFirstFriend + "," + phoneNumberSecondFriend + "," + phoneNumberThirdFriend
                new_fio = current_fio + "," + fioFirstFriend + "," + fioSecondFriend + "," + fioThirdFriend if current_fio else fioFirstFriend + "," + fioSecondFriend + "," + fioThirdFriend
                cursor.execute("UPDATE orders SET numberPhoneFriends = '%s', FIOFriends = '%s' WHERE orderMessageId = '%s'" % (new_phone_numbers, new_fio, test))
                conn.commit()
                cursor.close()
                conn.close()
                conn4 = sqlite3.connect('peoplebase.sql')
                cursor4 = conn4.cursor()
                cursor4.execute("SELECT * FROM users WHERE user_id = ('%s')" % (user_id))
                takeOrderTake = cursor4.fetchone()
                if takeOrderTake is not None:
                    famname = takeOrderTake[4]
                    actualName = takeOrderTake[5]
                    otchName = takeOrderTake[6]
                    userPhone = takeOrderTake[2]
                cursor4.close()
                conn4.close()
                bot.send_message(message.chat.id, f'–í—ã {famname} {actualName} {otchName} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {userPhone}.\n–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n1.{fioFirstFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberFirstFriend}\n2. {fioSecondFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberSecondFriend}\n 3. {fioThirdFriend} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumberThirdFriend}', parse_mode='html')
                print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberFirstFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioFirstFriend)
                print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberSecondFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioSecondFriend)
                print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞: ', phoneNumberThirdFriend, '–§–ò–û –¥—Ä—É–≥–∞: ', fioThirdFriend)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞ –±–µ–∑ "+" –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ —Å 8:', parse_mode='html')
                input_third_friend_number(message)

@bot.message_handler(commands=['data'])
def data(message):
    global user_id
    global city
    global cityTrue
    global nuberPhone
    global lastname
    global firstname
    global middlename
    global dataOfBirth       
    global citizenRF 
    global id_nubmer_list
    global check_user_id
    global data_called
    global nalogacc
    global passport
    global samozanYorN
    global orderTake
    global orderDone
    global orderMiss
    global percent_completed
    global percent_failed    

    user_id = message.from_user.id

    if not data_called:
        try:
            conn = sqlite3.connect('peoplebase.sql')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            takeParam = cursor.fetchone() 
            if takeParam:
                check_user_id = takeParam[9]
            else:
                check_user_id = None
            conn.close()
        except sqlite3.Error as e:
            bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤–∑—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
            return

        if takeParam:
            id_nubmer_list = takeParam[0]
            nuberPhone = takeParam[2]
            city = takeParam[3]
            lastname = takeParam[4]
            firstname = takeParam[5]
            middlename = takeParam[6]
            dataOfBirth = takeParam[7]        
            citizenRF = takeParam[8]   
            cityTrue = takeParam[14]  
            nalogacc = takeParam[10]  
            passport = takeParam[12]
            orderTake = takeParam[15]
            orderDone = takeParam[16]
            orderMiss = takeParam[17]
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        if nalogacc == '–ù–µ—Ç':
            samozanYorN = '–ù–µ—Ç'
        elif passport != '–ù–µ—Ç':
            samozanYorN = f'–î–∞\nüí∞ –†/–°: {nalogacc}\nü™™ –ü–∞—Å–ø–æ—Ä—Ç: {passport}'
        else:
            samozanYorN = f'–î–∞\nüí∞ –†/–°: {nalogacc}'

        if check_user_id is not None or user_id is not None:
            if cityTrue == 'False':
                markup = types.InlineKeyboardMarkup()
                btn2 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥', one_time_keyboard=True)
                btn3 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', one_time_keyboard=True)
                markup.row(btn2)  
                markup.row(btn3)  
                bot.send_message(message.chat.id, f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {samozanYorN} \nüèô –ì–æ—Ä–æ–¥(–∞): {city}\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                btn1 = types.InlineKeyboardButton('üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', one_time_keyboard=True)
                btn2 = types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤', callback_data='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤', one_time_keyboard=True)
                markup.row(btn1)  
                markup.row(btn2)  
                if passport == '–ù–µ—Ç':
                    messageInformation = f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {samozanYorN}\nüèô –ì–æ—Ä–æ–¥(–∞): {city}\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
                    btn3 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', one_time_keyboard=True)
                    markup.row(btn3)  
                else:
                    messageInformation = f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {samozanYorN}\nüèô –ì–æ—Ä–æ–¥(–∞): {city}'
                if nalogacc == '–ù–µ—Ç':
                    btn4 = types.InlineKeyboardButton('‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å', one_time_keyboard=True)
                    markup.row(btn4)  
                bot.send_message(message.chat.id, messageInformation, reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
            markup.row(btn2)          
            bot.send_message(message.chat.id, f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)

        data_called = True  
    else:
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è data —É–∂–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.')

@bot.message_handler(commands=['orders'])
def orders(message):
    global check_user_id
    global data_called
    data_called = False    
    user_id = message.from_user.id

    try:
        conn = sqlite3.connect('peoplebase.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        takeParam = cursor.fetchone() 
        if takeParam:
            check_user_id = takeParam[9]
        else:
            check_user_id = None
        conn.close()
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ")
        return

    if check_user_id is not None or user_id is not None:
        try:
            conn = sqlite3.connect('applicationbase.sql')
            cur = conn.cursor()
            cur.execute("SELECT * FROM orders WHERE id = ?", (user_id,))
            users = cur.fetchall()
            if users:
                info = ''
                for el in users:
                    info += (f'–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: {el[0]}\n'
                             f'<b>‚Ä¢–ì–æ—Ä–æ–¥:</b> {el[2]}\n'
                             f'<b>‚Ä¢–ê–¥—Ä–µ—Å:</b>üëâ {el[4]}\n'
                             f'<b>‚Ä¢–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> {el[5]}\n'
                             f'<b>‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</b> –≤ {el[6]}:00\n'
                             f'<b>‚Ä¢–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</b> {el[17]}:00\n'
                             f'<b>‚Ä¢–í–∞–º –Ω–∞ —Ä—É–∫–∏:</b> <u>{el[8]}.00</u> —Ä./—á–∞—Å, –º–∏–Ω–∏–º–∞–ª–∫–∞ 2 —á–∞—Å–∞\n'
                             f'<b>‚Ä¢–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º</b>')
                bot.send_message(message.chat.id, info, parse_mode='html')
            else:
                bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            cur.close()
            conn.close()
        except sqlite3.Error as e:
            bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤–∑—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
    else:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', url='https://t.me/GraeYeBot', one_time_keyboard=True)
        markup.row(btn2)          
        bot.send_message(message.chat.id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ!\n\nüëáüëáüëáüëáüëá', parse_mode='html', reply_markup=markup)

def input_birtgday(message):
    if isOpenEdit == True:
        bot.send_message(message.chat.id, dataOfBirthday, parse_mode='html')
        bot.register_next_step_handler(message, user_birthday_check)
    else:
        data(message)

def get_date(text):
    try:
        date = datetime.strptime(text, dateType)
        return date.strftime(dateType)
    except ValueError:
        return None

def user_birthday_check(message):
    global dataOfBirth    
    if isOpenEdit == True:

        try:
            if message.text is None:
                bot.send_message(message.from_user.id, textOnly)
                input_birtgday(message)
            else:
                dataOfBirth = get_date(message.text.strip())
                if dataOfBirth:
                    print('OP')
                else:
                    bot.send_message(message.chat.id, dateError)
                    bot.register_next_step_handler(message, user_birthday_check)
        except ValueError:
            bot.send_message(message.chat.id, dateError)
            bot.register_next_step_handler(message, user_birthday_check)
    else:
        data(message)

def input_birtgday2(message):
    if isOpenEdit == True:
        bot.send_message(message.chat.id, dataOfBirthday, parse_mode='html')
        bot.register_next_step_handler(message, user_birthday_check2)
    else:
        data(message)

def get_date2(text):
    try:
        date = datetime.strptime(text, dateType)
        return date.strftime(dateType)
    except ValueError:
        return None

def user_birthday_check2(message):
    global dataOfBirth    
    if isOpenEdit == True:
        try:
            if message.text is None:
                bot.send_message(message.from_user.id, textOnly)
                input_birtgday2(message)
            else:
                dataOfBirth = get_date2(message.text.strip())
                if dataOfBirth:
                    readyPassportInfo(message)
                else:
                    bot.send_message(message.chat.id, dateError)
                    bot.register_next_step_handler(message, user_birthday_check2)
        except ValueError:
            bot.send_message(message.chat.id, dateError)
            bot.register_next_step_handler(message, user_birthday_check2)
    else:
        data(message)

@bot.callback_query_handler(func=lambda callback: callback.data == 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
@bot.callback_query_handler(func=lambda callback: callback.data == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤') 
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å')
def callback_data_of_data(callback): 
    global cityTrue
    global isOpenEdit
    global data_called
    global samozanYorN
    global percent_completed
    global percent_failed
    if callback.data == 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ':
        data_called = False
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        cityTrue = 'False'
        conn = sqlite3.connect('peoplebase.sql')
        cur = conn.cursor()
        cur.execute("UPDATE users SET  cityAgree = '%s' WHERE id = '%s'" % (cityTrue, id_nubmer_list))
        conn.commit() 
        cur.close()
        conn.close()
        print('—Å–∏—Ç–∏ —Ç—Ä—É ',cityTrue)
        data(callback.message)
    elif callback.data == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤':  
        data_called = False         
        conn = sqlite3.connect('peoplebase.sql')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE id = '%s'" % (id_nubmer_list))
        test2 = c.fetchone()
        orderDataTake = test2[16]
        orderDataDone = test2[17]
        orderDataMiss = test2[18] 
        recordsTake = orderDataTake.split(',')
        orderCountTake = len(recordsTake)
        recordsDone = orderDataDone.split(',')
        orderCountDone = len(recordsDone) - 1
        recordsMiss = orderDataMiss.split(',')
        orderCountMiss = len(recordsMiss) - 1
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {orderCountTake}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {orderCountDone}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {orderCountMiss}")
        conn.close()
        try:
            percent_completed = (orderCountDone / (orderCountTake)) * 100
            percent_failed = (orderCountMiss / (orderCountTake)) * 100
        except Exception:
            percent_completed = 0
            percent_failed = 0
            print('–Ω–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è')
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(citizenRuButtonYesText, callback_data=citizenRuButtonYesTextCallbackData, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(citizenRuButtonNoText, callback_data=citizenRuButtonNoTextCallbackData, one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.send_message(callback.message.chat.id, f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n‚Ä¢ –í–∑—è–ª: {orderCountTake}\n‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–ª: {orderCountDone} ({percent_completed}%)\n‚Ä¢ –ë—Ä–∞–∫: {orderCountMiss} ({percent_failed}%)', reply_markup=markup)
    elif callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç': 
        print(nuberPhone , lastname)
        data_called = False
        isOpenEdit = True
        bot.edit_message_text(f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {samozanYorN} \nüèô –ì–æ—Ä–æ–¥(–∞): {city}', callback.message.chat.id, callback.message.message_id)
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        input_lastname(callback.message)   
    elif callback.data == '‚úÖ–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å': 
        data_called = False
        bot.edit_message_text(f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{nuberPhone}\nüë§ –§–ò–û: {lastname} {firstname} {middlename}\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\nüá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {citizenRF}\nü§ù –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {samozanYorN} \nüèô –ì–æ—Ä–æ–¥(–∞): {city}', callback.message.chat.id, callback.message.message_id)
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ö—Ç–æ —Ç–∞–∫–æ–π —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π‚ùì', callback_data='–ö—Ç–æ —Ç–∞–∫–æ–π —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π‚ùì', one_time_keyboard=True, url='https://npd.nalog.ru/')
        btn2 = types.InlineKeyboardButton('‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', callback_data='‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∞–Ω', one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', one_time_keyboard=True)
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', one_time_keyboard=True)
        markup.row(btn1)
        markup.row(btn2)
        markup.row(btn3)
        markup.row(btn4)       
        bot.send_message(callback.message.chat.id, f'1. –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—á–∏–∫–∏ –∏–º–µ—é—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É.\n2. –ü–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n3. –£ –≤–∞—Å –±—É–¥–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∞–ª–æ–≥–∏ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–πü§ù?', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∞–Ω')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
def callback_individual(callback): 
    global editButtonText1
    global editButtonText2
    global editButtonText3
    editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
    editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
    editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
    if callback.data == '‚òëÔ∏è –ù–µ—Ç, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.edit_message_text(f'1. –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—á–∏–∫–∏ –∏–º–µ—é—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É.\n2. –ü–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n3. –£ –≤–∞—Å –±—É–¥–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∞–ª–æ–≥–∏ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–πü§ù?', callback.message.chat.id, callback.message.message_id)
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True)        
        markup.row(btn1, btn2, btn3)
        bot.send_message(callback.message.chat.id, f'üè¶ –ö–∞–∫–∏–º –±–∞–Ω–∫–æ–º –ø–æ–ª—å–∑—É–µ—à—å—Å—è?', reply_markup=markup)
    elif callback.data == '‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.edit_message_text(f'1. –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—á–∏–∫–∏ –∏–º–µ—é—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É.\n2. –ü–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n3. –£ –≤–∞—Å –±—É–¥–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∞–ª–æ–≥–∏ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–πü§ù?', callback.message.chat.id, callback.message.message_id)
    elif callback.data == '‚úÖ–î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∞–Ω':
        bot.edit_message_text(f'1. –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—á–∏–∫–∏ –∏–º–µ—é—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É.\n2. –ü–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n3. –£ –≤–∞—Å –±—É–¥–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∞–ª–æ–≥–∏ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–πü§ù?', callback.message.chat.id, callback.message.message_id)
        input_my_nalog_accaunt(callback.message)

def input_my_nalog_accaunt(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å2', one_time_keyboard=True)
    markup.row(btn2)  
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (20 —Ü–∏—Ñ—Ä, –Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö)', parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, my_nalog_accaunt_check)   

def my_nalog_accaunt_check(message):
    global nalogacc
    if message.text is None:
        bot.send_message(message.from_user.id, textOnly)
        input_my_nalog_accaunt(message) 
    else:
        if len(message.text.strip()) != 20:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞')
            message.text.strip(None)
            input_my_nalog_accaunt(message) 
        else:
            if message.text.isdigit():
                bot.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (20 —Ü–∏—Ñ—Ä, –Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö)', message.chat.id, message.message_id-1)
                nalogacc = message.text.strip()
                print(nalogacc)
                conn = sqlite3.connect('peoplebase.sql')
                cur = conn.cursor()
                cur.execute("UPDATE users SET samozanatost = '%s' WHERE id = '%s'" % (nalogacc, id_nubmer_list))
                conn.commit() 
                cur.close()
                conn.close()
                bot.send_message(message.chat.id, f'‚úÖ –°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–°—á–µ—Ç: {nalogacc}')
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞')
                message.text.strip(None)
                input_my_nalog_accaunt(message) 

@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å2')
def callback_bank(callback):
    if callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å2': 
        bot.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (20 —Ü–∏—Ñ—Ä, –Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö)', callback.message.chat.id, callback.message.message_id)
        data(callback.message)

@bot.callback_query_handler(func=lambda callback: callback.data == editButtonText1)
@bot.callback_query_handler(func=lambda callback: callback.data == editButtonText2)
@bot.callback_query_handler(func=lambda callback: callback.data == editButtonText3)
def callback_bank(callback): 
    global editButtonText1
    global editButtonText2
    global editButtonText3
    if callback.data == editButtonText1:
        editButtonText1 = '‚úÖ –°–±–µ—Ä–±–∞–Ω–∫'
        editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
        editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True)  
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)        
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(f'–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å—ã –∏ —É—Å–ª—É–≥–∏¬ª\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª, –¥–∞–ª–µ–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å¬ª\n4. –í—ã–±–µ—Ä–∏—Ç–µ –î–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–û–û–û¬ª\n5. –î–∞–ª–µ–µ ¬´–£—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è¬ª –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n6. –ó–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –°–ú–° –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª –æ—Ç –°–±–µ—Ä–ë–∞–Ω–∫–∞, –∑–∞—Ç–µ–º –°–ú–° –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.sberbank.ru/ru/svoedelo#freeservices\n\n–ü—Ä–æ—à–µ–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', callback.message.chat.id, callback.message.message_id, reply_markup=markup)   
    elif callback.data == editButtonText2:
        editButtonText2 = '‚úÖ–¢–∏–Ω—å–∫–æ—Ñ—Ñ'        
        editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
        editButtonText3 = '–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True)        
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)     
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(f'–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –û–Ω–ª–∞–π–Ω\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å—ã –∏ —É—Å–ª—É–≥–∏¬ª\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª, –¥–∞–ª–µ–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å¬ª\n4. –í—ã–±–µ—Ä–∏—Ç–µ –î–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–û–û–û¬ª\n5. –î–∞–ª–µ–µ ¬´–£—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è¬ª –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n6. –ó–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –°–ú–° –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª –æ—Ç –°–±–µ—Ä–ë–∞–Ω–∫–∞, –∑–∞—Ç–µ–º –°–ú–° –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.sberbank.ru/ru/svoedelo#freeservices\n\n–ü—Ä–æ—à–µ–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
    elif callback.data == editButtonText3:
        editButtonText3 = '‚úÖ–î—Ä—É–≥–æ–π –±–∞–Ω–∫'
        editButtonText1 = '–°–±–µ—Ä–±–∞–Ω–∫'
        editButtonText2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(editButtonText1, callback_data=editButtonText1, one_time_keyboard=True)
        btn2 = types.InlineKeyboardButton(editButtonText2, callback_data=editButtonText2, one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton(editButtonText3, callback_data=editButtonText3, one_time_keyboard=True) 
        btn4 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)            
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(f'–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –î—Ä—É–≥–æ–π –±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n2. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å—ã –∏ —É—Å–ª—É–≥–∏¬ª\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª, –¥–∞–ª–µ–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å¬ª\n4. –í—ã–±–µ—Ä–∏—Ç–µ –î–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–û–û–û¬ª\n5. –î–∞–ª–µ–µ ¬´–£—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è¬ª –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n6. –ó–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –°–ú–° –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ ¬´–°–≤–æ—ë –¥–µ–ª–æ¬ª –æ—Ç –°–±–µ—Ä–ë–∞–Ω–∫–∞, –∑–∞—Ç–µ–º –°–ú–° –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.sberbank.ru/ru/svoedelo#freeservices\n\n–ü—Ä–æ—à–µ–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
   
@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
def callback_edit_data_person(callback): 
    if callback.data == '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û')
@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†')
@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
def callback_edit_person_data_alone(callback): 
    global agreeaccaunt
    global isOpenEdit
    if callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û':
        isOpenEdit = True
        input_lastname2(callback.message)
    elif callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†':
        isOpenEdit = True
        input_birtgday2(callback.message)
    elif callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°':
        isOpenEdit = True
        input_passport(callback.message)
    elif callback.data == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        agreeaccaunt = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
        conn = sqlite3.connect('peoplebase.sql')
        cur = conn.cursor()
        cur.execute("UPDATE users SET last_name = '%s', firts_name = '%s', middle_name = '%s', birthday = '%s', agreeacc = '%s', passport = '%s' WHERE id = '%s'" % (lastname, firstname, middlename, dataOfBirth, agreeaccaunt, passport, id_nubmer_list))
        conn.commit() 
        cur.close()
        conn.close()
        bot.answer_callback_query(callback_query_id=callback.id, text='–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')        
        bot.edit_message_text(f'‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã\n–§–ò–û: <u>{lastname} {firstname} {middlename}</u>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', callback.message.chat.id, callback.message.message_id, parse_mode='html')
    elif callback.data == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.edit_message_text(f'–§–ò–û: <u>{lastname} {firstname} {middlename}</u>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', callback.message.chat.id, callback.message.message_id, parse_mode='html')


def input_lastname2(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\nüñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, lastneme_check2)   
    else:
        data(message)

def lastneme_check2(message):
    global lastname
    if isOpenEdit == True:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_lastname2(message) 
        else:
            if len(message.text.strip()) > maxSymbol:
                bot.send_message(message.chat.id, lastnameError)
                message.text.strip(None)
                input_lastname2(message) 
            else:
                lastname = message.text.strip()
                print(lastname)
                bot.edit_message_text('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\nüñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', message.chat.id, message.message_id - 1, parse_mode='html')
                input_firstname2(message)
    else:
        data(message)

def input_firstname2(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, firstname_check2)
    else:
        data(message)

def firstname_check2(message):       
    global firstname
    if isOpenEdit == True:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_firstname2(message)
        else:
            if len(message.text.strip()) > maxSymbol:
                bot.send_message(message.chat.id, firstnameError)
                message.text.strip(None)
                input_firstname2(message)        
            else:                  
                firstname = message.text.strip()    
                print(firstname_check)
                bot.edit_message_text('üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', message.chat.id, message.message_id - 1, parse_mode='html')
                input_middlename2(message)
    else:
        data(message)

def input_middlename2(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ—Ç—á–µ—Å—Ç–≤–æ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, middlename_check2)
    else:
        data(message)

def middlename_check2(message):      
    global middlename
    if isOpenEdit == True:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_middlename2(message)
        else:
            if len(message.text.strip()) > maxSymbol:
                bot.send_message(message.chat.id, middlenameError)
                message.text.strip(None)
                input_middlename2(message) 
            else:     
                middlename = message.text.strip()
                print(middlename_check)
                bot.edit_message_text('üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ—Ç—á–µ—Å—Ç–≤–æ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', message.chat.id, message.message_id - 1, parse_mode='html')
                readyPassportInfo(message)
    else:
        data(message)

@bot.callback_query_handler(func=lambda callback: callback.data == '–ï–¥—É1')
def callback_data_of_data(callback): 
    if callback.data == '–ï–¥—É1':
        bot.send_message(callback.message.chat.id, '–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', parse_mode='html')

@bot.callback_query_handler(func=lambda callback: callback.data == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
def callback_delete_previos_message(callback): 
    global isOpenEdit
    if callback.data == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        isOpenEdit = False

def input_lastname(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\nüñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, lastneme_check)   
    else:
        data(message)

def lastneme_check(message):
    global lastname
    if isOpenEdit == True:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_lastname(message) 
        else:
            if len(message.text.strip()) > maxSymbol:
                bot.send_message(message.chat.id, lastnameError)
                message.text.strip(None)
                input_lastname(message) 
            else:
                lastname = message.text.strip()
                print(lastname)
                bot.edit_message_text('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å —Ç–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\nüñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', message.chat.id, message.message_id - 1,  parse_mode='html')
                input_firstname(message)
    else:
        data(message)

def input_firstname(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, firstname_check)
    else:
        data(message)

def firstname_check(message):       
    global firstname
    if isOpenEdit == True:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_firstname(message)
        else:
            if len(message.text.strip()) > maxSymbol:
                bot.send_message(message.chat.id, firstnameError)
                message.text.strip(None)
                input_firstname(message)        
            else:                  
                firstname = message.text.strip()    
                print(firstname_check)
                bot.edit_message_text('üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', message.chat.id, message.message_id - 1, parse_mode='html')
                input_middlename(message)
    else:
        data(message)

def input_middlename(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, 'üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ—Ç—á–µ—Å—Ç–≤–æ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, middlename_check)
    else:
        data(message)

def middlename_check(message):      
    global middlename
    if isOpenEdit == True:
        if message.text is None:
            bot.send_message(message.from_user.id, textOnly)
            input_middlename(message)
        else:
            if len(message.text.strip()) > maxSymbol:
                bot.send_message(message.chat.id, middlenameError)
                message.text.strip(None)
                input_middlename(message) 
            else:     
                middlename = message.text.strip()
                print(middlename_check)
                bot.edit_message_text('üñå–í–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ—Ç—á–µ—Å—Ç–≤–æ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ:', message.chat.id, message.message_id - 1, parse_mode='html')

                input_passport(message)
    else:
        data(message)

def input_passport(message):
    if isOpenEdit == True:
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', callback_data='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', one_time_keyboard=True)
        markup.row(btn2)  
        bot.send_message(message.chat.id, '‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXYYYYYY, –≥–¥–µ XXXX - —Å–µ—Ä–∏—è, YYYYYY - –Ω–æ–º–µ—Ä.', parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, passport_check)
    else:
        data(message)

def passport_check(message):      
    global passport    
    if isOpenEdit == True:
        if message.text is None:
            bot.edit_message_text('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXYYYYYY, –≥–¥–µ XXXX - —Å–µ—Ä–∏—è, YYYYYY - –Ω–æ–º–µ—Ä.', message.chat.id, message.message_id - 1, parse_mode='html')
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã')
            input_passport(message)
        else:
            if len(message.text.strip()) != 10:
                bot.edit_message_text('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXYYYYYY, –≥–¥–µ XXXX - —Å–µ—Ä–∏—è, YYYYYY - –Ω–æ–º–µ—Ä.', message.chat.id, message.message_id - 1, parse_mode='html')
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã')
                message.text.strip(None)
                input_passport(message)     
            else:
                if message.text.isdigit():
                    passport = message.text.strip()
                    print(passport)
                    bot.edit_message_text('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXYYYYYY, –≥–¥–µ XXXX - —Å–µ—Ä–∏—è, YYYYYY - –Ω–æ–º–µ—Ä.', message.chat.id, message.message_id - 1, parse_mode='html')
                    readyPassportInfo(message)
                else:
                    bot.edit_message_text('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXYYYYYY, –≥–¥–µ XXXX - —Å–µ—Ä–∏—è, YYYYYY - –Ω–æ–º–µ—Ä.', message.chat.id, message.message_id - 1, parse_mode='html')
                    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã')
                    input_passport(message)
    else:
        data(message)

def readyPassportInfo(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û', one_time_keyboard=True)
    btn2 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†', one_time_keyboard=True)
    btn3 = types.InlineKeyboardButton('üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç', callback_data='üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–°', one_time_keyboard=True)        
    btn4 = types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å(–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:2)', callback_data='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', one_time_keyboard=True)
    btn5 = types.InlineKeyboardButton('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Å—Ç–∞—Ç—å—Å—è —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º', callback_data='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', one_time_keyboard=True)
    markup.row(btn1)
    markup.row(btn2)
    markup.row(btn3)
    markup.row(btn4)
    markup.row(btn5)
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Ñ–∏–æ/–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è/—Å–µ—Ä–∏—è+–Ω–æ–º–µ—Ä)\n\n–§–ò–û: {lastname} {firstname} {middlename}\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dataOfBirth}\n\n–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport}', parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') 
def callback_rename_city(callback): 
    global cityTrue
    global data_called
    global agreeaccaunt
    if callback.data == 'üñå–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥':
        data_called = False
        usercitizenRF = f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}'        
        markup = types.InlineKeyboardMarkup()
        btn2 = types.InlineKeyboardButton(f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"', callback_data=f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"', one_time_keyboard=True)
        btn3 = types.InlineKeyboardButton('‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', one_time_keyboard=True)
        markup.row(btn2)  
        markup.row(btn3)  
        bot.edit_message_text(usercitizenRF, callback.message.chat.id, callback.message.message_id, reply_markup=markup)
    elif callback.data == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        data_called = False
        cityTrue = 'True'
        conn = sqlite3.connect('peoplebase.sql')
        cur = conn.cursor()
        cur.execute("UPDATE users SET  cityAgree = '%s' WHERE id = '%s'" % (cityTrue, id_nubmer_list))
        conn.commit() 
        cur.close()
        conn.close()
        print('—Å–∏—Ç–∏ —Ç—Ä—É ',cityTrue)
        bot.edit_message_text('‚úÖ–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', callback.message.chat.id, callback.message.message_id)
        data(callback.message)

@bot.callback_query_handler(func=lambda callback: callback.data == f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"')
@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') 
def callback_delete_city(callback):   
    if callback.data == f'‚ùå–£–¥–∞–ª–∏—Ç—å "{city}"':
        markup = types.InlineKeyboardMarkup()
        btn3 = types.InlineKeyboardButton('‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', one_time_keyboard=True) 
        markup.row(btn3)  
        bot.edit_message_text('–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å.', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
    else:          
        bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', callback.message.chat.id, callback.message.message_id)

@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥') 
def callback_add_city(callback):   
    if callback.data == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥':
        locationCityCitizen(callback.message)        
    else:          
        bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', callback.message.chat.id, callback.message.message_id)

def locationCityCitizen(message):
    try:
        global geolocator
        keyboard = types.ReplyKeyboardMarkup()
        button_geo = types.KeyboardButton(text=geolocationButtonText, request_location=True)
        keyboard.add(button_geo)
        bot.send_message(message.chat.id, '‚ö†Ô∏è–í–∫–ª—é—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!‚ö†Ô∏è\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥üëáüëáüëá\n\n‚ÑπÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—èüï∞.', reply_markup=keyboard)  
        bot.register_next_step_handler(message, location)
        geolocator = Nominatim(user_agent = geolocationNameApp)    
    except Exception:        
        bot.send_message(message.chat.id, phoneError, parse_mode='html')
        bot.register_next_step_handler(message, locationCityCitizen)   

def city_check(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address'] 
    town = address.get('town', '')
    city = address.get('city', '')
    if town == '':
        town = city
    if city == '':
        city = town  
    return city

def location(message):
    global locationcity
    if message.location is not None:           
        a = [message.location.latitude, message.location.longitude]         
        city_name = city_check(a)
        locationcity = city_name
        bot.send_message(message.chat.id, f'{foundedCity} {locationcity}', reply_markup=types.ReplyKeyboardRemove())
        markup = types.InlineKeyboardMarkup()
        btn3 = types.InlineKeyboardButton('‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2', one_time_keyboard=True) 
        markup.row(btn3)  
        bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥. –¢–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 13 –¥–Ω–µ–π.\n–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', reply_markup=markup)            
    else:        
        bot.send_message(message.chat.id, geolocationError, parse_mode='html')
        bot.register_next_step_handler(message, location)   

@bot.callback_query_handler(func=lambda callback: callback.data == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2') 
def callback_message_citizen(callback):   
    if callback.data == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2':
        bot.answer_callback_query(callback_query_id=callback.id, text='–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',show_alert=True)
        data(callback.message)
    else:          
        bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–æ: üü¢{city}', callback.message.chat.id, callback.message.message_id)
        
if __name__ == '__main__':
    print('Bot started')
    bot.polling(non_stop=True)